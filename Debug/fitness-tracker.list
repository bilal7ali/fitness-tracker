
fitness-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb0  08004fb0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb8  08004fb8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000068  08005028  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08005028  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011779  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000263e  00000000  00000000  00031854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00033e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cce  00000000  00000000  00034ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a51  00000000  00000000  00035bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014dcf  00000000  00000000  000595ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d53bf  00000000  00000000  0006e3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cb4  00000000  00000000  00143790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00148444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f40 	.word	0x08004f40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004f40 	.word	0x08004f40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MAX30102_init>:
    UNUSED(ir_sample);
    UNUSED(red_sample);
}

void MAX30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	obj->_ui2c = hi2c;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	683a      	ldr	r2, [r7, #0]
 80005ba:	601a      	str	r2, [r3, #0]
	obj->_interrupt_flag = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3304      	adds	r3, #4
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 ffcd 	bl	800456c <memset>
	memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3384      	adds	r3, #132	; 0x84
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 ffc6 	bl	800456c <memset>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <MAX30102_write>:

void MAX30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	607a      	str	r2, [r7, #4]
 80005f2:	461a      	mov	r2, r3
 80005f4:	460b      	mov	r3, r1
 80005f6:	72fb      	strb	r3, [r7, #11]
 80005f8:	4613      	mov	r3, r2
 80005fa:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 80005fc:	893b      	ldrh	r3, [r7, #8]
 80005fe:	3301      	adds	r3, #1
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fd5d 	bl	80040c0 <malloc>
 8000606:	4603      	mov	r3, r0
 8000608:	617b      	str	r3, [r7, #20]
    *payload = reg;
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	7afa      	ldrb	r2, [r7, #11]
 800060e:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d009      	beq.n	800062a <MAX30102_write+0x42>
 8000616:	893b      	ldrh	r3, [r7, #8]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d006      	beq.n	800062a <MAX30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	893a      	ldrh	r2, [r7, #8]
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	4618      	mov	r0, r3
 8000626:	f004 f82b 	bl	8004680 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	893b      	ldrh	r3, [r7, #8]
 8000630:	3301      	adds	r3, #1
 8000632:	b29b      	uxth	r3, r3
 8000634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	21ae      	movs	r1, #174	; 0xae
 800063e:	f001 fae9 	bl	8001c14 <HAL_I2C_Master_Transmit>
    free(payload);
 8000642:	6978      	ldr	r0, [r7, #20]
 8000644:	f003 fd44 	bl	80040d0 <free>
}
 8000648:	bf00      	nop
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MAX30102_read>:

void MAX30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af02      	add	r7, sp, #8
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	461a      	mov	r2, r3
 800065c:	460b      	mov	r3, r1
 800065e:	72fb      	strb	r3, [r7, #11]
 8000660:	4613      	mov	r3, r2
 8000662:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8000664:	7afb      	ldrb	r3, [r7, #11]
 8000666:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	f107 0217 	add.w	r2, r7, #23
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	21ae      	movs	r1, #174	; 0xae
 800067a:	f001 facb 	bl	8001c14 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	893b      	ldrh	r3, [r7, #8]
 8000684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	21ae      	movs	r1, #174	; 0xae
 800068e:	f001 fbbf 	bl	8001e10 <HAL_I2C_Master_Receive>
}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <MAX30102_reset>:

void MAX30102_reset(max30102_t *obj)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b084      	sub	sp, #16
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80006a2:	2340      	movs	r3, #64	; 0x40
 80006a4:	73fb      	strb	r3, [r7, #15]
    MAX30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80006a6:	f107 020f 	add.w	r2, r7, #15
 80006aa:	2301      	movs	r3, #1
 80006ac:	2109      	movs	r1, #9
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff9a 	bl	80005e8 <MAX30102_write>
}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MAX30102_setSettings>:

void MAX30102_setSettings(max30102_t *obj)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    uint8_t reg = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]

    // Enable DIE_TEMP_RDY (internal temp ready) interrupt
    reg = (1 & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 80006c8:	2302      	movs	r3, #2
 80006ca:	73fb      	strb	r3, [r7, #15]
    MAX30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 80006cc:	f107 020f 	add.w	r2, r7, #15
 80006d0:	2301      	movs	r3, #1
 80006d2:	2103      	movs	r1, #3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff87 	bl	80005e8 <MAX30102_write>

    //Enable DIE_TEMP_EN (temp measurement)
    reg = (1 & 0x01) << MAX30102_DIE_TEMP_EN;
 80006da:	2302      	movs	r3, #2
 80006dc:	73fb      	strb	r3, [r7, #15]
    MAX30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 80006de:	f107 020f 	add.w	r2, r7, #15
 80006e2:	2301      	movs	r3, #1
 80006e4:	2121      	movs	r1, #33	; 0x21
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff7e 	bl	80005e8 <MAX30102_write>

    MAX30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80006ec:	f107 020f 	add.w	r2, r7, #15
 80006f0:	2301      	movs	r3, #1
 80006f2:	2102      	movs	r1, #2
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ffab 	bl	8000650 <MAX30102_read>
    reg |= (1 << MAX30102_INTERRUPT_A_FULL); // Enable A_FULL interrupt
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000700:	b2db      	uxtb	r3, r3
 8000702:	73fb      	strb	r3, [r7, #15]
    reg |= (1 << MAX30102_INTERRUPT_PPG_RDY); // Enable PPG_RDY interrupt
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070a:	b2db      	uxtb	r3, r3
 800070c:	73fb      	strb	r3, [r7, #15]
    reg |= (1 << MAX30102_INTERRUPT_ALC_OVF); // Enable ALC_OVF interrupt
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	b2db      	uxtb	r3, r3
 8000716:	73fb      	strb	r3, [r7, #15]
    MAX30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8000718:	f107 020f 	add.w	r2, r7, #15
 800071c:	2301      	movs	r3, #1
 800071e:	2102      	movs	r1, #2
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff61 	bl	80005e8 <MAX30102_write>

    // Set mode
    uint8_t config;
    MAX30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8000726:	f107 020e 	add.w	r2, r7, #14
 800072a:	2301      	movs	r3, #1
 800072c:	2109      	movs	r1, #9
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff8e 	bl	8000650 <MAX30102_read>
    config = (config & 0xf8) | MAX30102_spo2;
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	b25b      	sxtb	r3, r3
 8000738:	f023 0307 	bic.w	r3, r3, #7
 800073c:	b25b      	sxtb	r3, r3
 800073e:	f043 0303 	orr.w	r3, r3, #3
 8000742:	b25b      	sxtb	r3, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	73bb      	strb	r3, [r7, #14]
    MAX30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8000748:	f107 020e 	add.w	r2, r7, #14
 800074c:	2301      	movs	r3, #1
 800074e:	2109      	movs	r1, #9
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff49 	bl	80005e8 <MAX30102_write>
    MAX30102_clearFifo(obj);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f95f 	bl	8000a1a <MAX30102_clearFifo>

    // Set sampling rate
    config = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73bb      	strb	r3, [r7, #14]
    MAX30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000760:	f107 020e 	add.w	r2, r7, #14
 8000764:	2301      	movs	r3, #1
 8000766:	210a      	movs	r1, #10
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff71 	bl	8000650 <MAX30102_read>
    config = (config & 0x63) | (max30102_sr_800 << MAX30102_SPO2_SR);
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	b25b      	sxtb	r3, r3
 8000772:	f003 0363 	and.w	r3, r3, #99	; 0x63
 8000776:	b25b      	sxtb	r3, r3
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	b25b      	sxtb	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	73bb      	strb	r3, [r7, #14]
    MAX30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000782:	f107 020e 	add.w	r2, r7, #14
 8000786:	2301      	movs	r3, #1
 8000788:	210a      	movs	r1, #10
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff2c 	bl	80005e8 <MAX30102_write>

    // Set LED pulse width
    config = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	73bb      	strb	r3, [r7, #14]
    MAX30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8000794:	f107 020e 	add.w	r2, r7, #14
 8000798:	2301      	movs	r3, #1
 800079a:	210a      	movs	r1, #10
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff57 	bl	8000650 <MAX30102_read>
    config = (config & 0x7c) | (max30102_pw_16_bit << MAX30102_SPO2_LEW_PW);
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	73bb      	strb	r3, [r7, #14]
    MAX30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80007b6:	f107 020e 	add.w	r2, r7, #14
 80007ba:	2301      	movs	r3, #1
 80007bc:	210a      	movs	r1, #10
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff12 	bl	80005e8 <MAX30102_write>

    // Set ADC resolution
    config = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73bb      	strb	r3, [r7, #14]
    MAX30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80007c8:	f107 020e 	add.w	r2, r7, #14
 80007cc:	2301      	movs	r3, #1
 80007ce:	210a      	movs	r1, #10
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff3d 	bl	8000650 <MAX30102_read>
    config = (config & 0x1f) | (max30102_adc_2048 << MAX30102_SPO2_ADC_RGE);
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	f003 031f 	and.w	r3, r3, #31
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	73bb      	strb	r3, [r7, #14]
    MAX30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80007e0:	f107 020e 	add.w	r2, r7, #14
 80007e4:	2301      	movs	r3, #1
 80007e6:	210a      	movs	r1, #10
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fefd 	bl	80005e8 <MAX30102_write>

    // Set LED1 current
    uint8_t pa = 6.2 / 0.2;
 80007ee:	231f      	movs	r3, #31
 80007f0:	737b      	strb	r3, [r7, #13]
    MAX30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80007f2:	f107 020d 	add.w	r2, r7, #13
 80007f6:	2301      	movs	r3, #1
 80007f8:	210c      	movs	r1, #12
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff fef4 	bl	80005e8 <MAX30102_write>

    // Set LED2 current
    pa = 6.2 / 0.2;
 8000800:	231f      	movs	r3, #31
 8000802:	737b      	strb	r3, [r7, #13]
    MAX30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8000804:	f107 020d 	add.w	r2, r7, #13
 8000808:	2301      	movs	r3, #1
 800080a:	210d      	movs	r1, #13
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff feeb 	bl	80005e8 <MAX30102_write>
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <MAX30102_setInterruptFlag>:

void MAX30102_setInterruptFlag(max30102_t *obj)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2201      	movs	r2, #1
 8000826:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <MAX30102_hasInterrupt>:

uint8_t MAX30102_hasInterrupt(max30102_t *obj)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <MAX30102_interruptHandler>:

void MAX30102_interruptHandler(max30102_t *obj)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8000858:	2300      	movs	r3, #0
 800085a:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    MAX30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800085c:	f107 020c 	add.w	r2, r7, #12
 8000860:	2302      	movs	r3, #2
 8000862:	2100      	movs	r1, #0
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fef3 	bl	8000650 <MAX30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800086a:	7b3b      	ldrb	r3, [r7, #12]
 800086c:	09db      	lsrs	r3, r3, #7
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <MAX30102_interruptHandler+0x2e>
    {
        // FIFO almost full
    	MAX30102_readFifo(obj);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 f851 	bl	8000920 <MAX30102_readFifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d007      	beq.n	800089c <MAX30102_interruptHandler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        MAX30102_readTemp(obj, &temp_int, &temp_frac);
 800088c:	f107 020a 	add.w	r2, r7, #10
 8000890:	f107 030b 	add.w	r3, r7, #11
 8000894:	4619      	mov	r1, r3
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f8a9 	bl	80009ee <MAX30102_readTemp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <MAX30102_setFifoConfig>:

void MAX30102_setFifoConfig(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	4608      	mov	r0, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	461a      	mov	r2, r3
 80008ba:	4603      	mov	r3, r0
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	460b      	mov	r3, r1
 80008c0:	70bb      	strb	r3, [r7, #2]
 80008c2:	4613      	mov	r3, r2
 80008c4:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	015b      	lsls	r3, r3, #5
 80008ce:	b25a      	sxtb	r2, r3
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 80008dc:	78bb      	ldrb	r3, [r7, #2]
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
 80008ea:	b25b      	sxtb	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 80008f4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	b25a      	sxtb	r2, r3
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	b25b      	sxtb	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b25b      	sxtb	r3, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	73fb      	strb	r3, [r7, #15]
    MAX30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800090a:	f107 020f 	add.w	r2, r7, #15
 800090e:	2301      	movs	r3, #1
 8000910:	2108      	movs	r1, #8
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fe68 	bl	80005e8 <MAX30102_write>
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <MAX30102_readFifo>:

void MAX30102_readFifo(max30102_t *obj)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wrPtr = 0, rdPtr = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	74fb      	strb	r3, [r7, #19]
 800092c:	2300      	movs	r3, #0
 800092e:	74bb      	strb	r3, [r7, #18]
    MAX30102_read(obj, MAX30102_FIFO_WR_PTR, &wrPtr, 1);
 8000930:	f107 0213 	add.w	r2, r7, #19
 8000934:	2301      	movs	r3, #1
 8000936:	2104      	movs	r1, #4
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fe89 	bl	8000650 <MAX30102_read>
    MAX30102_read(obj, MAX30102_FIFO_RD_PTR, &rdPtr, 1);
 800093e:	f107 0212 	add.w	r2, r7, #18
 8000942:	2301      	movs	r3, #1
 8000944:	2106      	movs	r1, #6
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fe82 	bl	8000650 <MAX30102_read>

    int8_t numSamples;

    numSamples = (int8_t)wrPtr - (int8_t)rdPtr;
 800094c:	7cfa      	ldrb	r2, [r7, #19]
 800094e:	7cbb      	ldrb	r3, [r7, #18]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	77fb      	strb	r3, [r7, #31]
    if (numSamples < 1)
 8000956:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800095a:	2b00      	cmp	r3, #0
 800095c:	dc03      	bgt.n	8000966 <MAX30102_readFifo+0x46>
    {
        numSamples += 32;
 800095e:	7ffb      	ldrb	r3, [r7, #31]
 8000960:	3320      	adds	r3, #32
 8000962:	b2db      	uxtb	r3, r3
 8000964:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < numSamples; i++)
 8000966:	2300      	movs	r3, #0
 8000968:	77bb      	strb	r3, [r7, #30]
 800096a:	e035      	b.n	80009d8 <MAX30102_readFifo+0xb8>
    {
        uint8_t sample[6];
        MAX30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800096c:	f107 020c 	add.w	r2, r7, #12
 8000970:	2306      	movs	r3, #6
 8000972:	2107      	movs	r1, #7
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fe6b 	bl	8000650 <MAX30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800097a:	7b3b      	ldrb	r3, [r7, #12]
 800097c:	041b      	lsls	r3, r3, #16
 800097e:	461a      	mov	r2, r3
 8000980:	7b7b      	ldrb	r3, [r7, #13]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	4313      	orrs	r3, r2
 8000986:	7bba      	ldrb	r2, [r7, #14]
 8000988:	4313      	orrs	r3, r2
 800098a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800098e:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	041b      	lsls	r3, r3, #16
 8000994:	461a      	mov	r2, r3
 8000996:	7c3b      	ldrb	r3, [r7, #16]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	4313      	orrs	r3, r2
 800099c:	7c7a      	ldrb	r2, [r7, #17]
 800099e:	4313      	orrs	r3, r2
 80009a0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80009a4:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 80009a6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80009b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	3320      	adds	r3, #32
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 80009c4:	6979      	ldr	r1, [r7, #20]
 80009c6:	69b8      	ldr	r0, [r7, #24]
 80009c8:	f000 f846 	bl	8000a58 <max30102_plot>
    for (int8_t i = 0; i < numSamples; i++)
 80009cc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	77bb      	strb	r3, [r7, #30]
 80009d8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80009dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbc3      	blt.n	800096c <MAX30102_readFifo+0x4c>
    }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <MAX30102_readTemp>:

void MAX30102_readTemp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
    MAX30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 80009fa:	2301      	movs	r3, #1
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	211f      	movs	r1, #31
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f7ff fe25 	bl	8000650 <MAX30102_read>
    MAX30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8000a06:	2301      	movs	r3, #1
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fe1f 	bl	8000650 <MAX30102_read>
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <MAX30102_clearFifo>:
        return HAL_ERROR;
    }
}

void MAX30102_clearFifo(max30102_t *obj)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]
    MAX30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8000a26:	f107 020f 	add.w	r2, r7, #15
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fdda 	bl	80005e8 <MAX30102_write>
    MAX30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8000a34:	f107 020f 	add.w	r2, r7, #15
 8000a38:	2303      	movs	r3, #3
 8000a3a:	2106      	movs	r1, #6
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fdd3 	bl	80005e8 <MAX30102_write>
    MAX30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8000a42:	f107 020f 	add.w	r2, r7, #15
 8000a46:	2303      	movs	r3, #3
 8000a48:	2105      	movs	r1, #5
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fdcc 	bl	80005e8 <MAX30102_write>
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <max30102_plot>:


extern max30102_t max30102;

void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	static meanDiffFilter_t meanDiffFilter = {0};
//	printf("HELLO\r\n");
//	printf("Unfiltered Red:%lu\r\n", red_sample);
	int32_t filtered_red = dcFilter(red_sample);
 8000a62:	6838      	ldr	r0, [r7, #0]
 8000a64:	f000 f812 	bl	8000a8c <dcFilter>
 8000a68:	60f8      	str	r0, [r7, #12]
	int32_t meanDiffRed = meanDiff(filtered_red, &meanDiffFilter);
 8000a6a:	4906      	ldr	r1, [pc, #24]	; (8000a84 <max30102_plot+0x2c>)
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f000 f835 	bl	8000adc <meanDiff>
 8000a72:	60b8      	str	r0, [r7, #8]

	printf("Red:%ld\r\n", meanDiffRed);
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <max30102_plot+0x30>)
 8000a78:	f003 fc8e 	bl	8004398 <iprintf>

}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000084 	.word	0x20000084
 8000a88:	08004f58 	.word	0x08004f58

08000a8c <dcFilter>:

int32_t dcFilter(uint32_t sample)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	uint16_t alpha = 95;
 8000a94:	235f      	movs	r3, #95	; 0x5f
 8000a96:	82fb      	strh	r3, [r7, #22]
	static int32_t prev_w = 0;

	int32_t w = sample + (alpha * prev_w) / 100;
 8000a98:	8afb      	ldrh	r3, [r7, #22]
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <dcFilter+0x48>)
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <dcFilter+0x4c>)
 8000aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa8:	1152      	asrs	r2, r2, #5
 8000aaa:	17db      	asrs	r3, r3, #31
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
	int32_t result = w - prev_w;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <dcFilter+0x48>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	60fb      	str	r3, [r7, #12]

//	printf("Result:%lu\r\n", result);

	prev_w = w;
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <dcFilter+0x48>)
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	6013      	str	r3, [r2, #0]

	return result;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	371c      	adds	r7, #28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	200000a4 	.word	0x200000a4
 8000ad8:	51eb851f 	.word	0x51eb851f

08000adc <meanDiff>:


int32_t meanDiff(int32_t newSample, meanDiffFilter_t *sampleValues)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	int32_t avg = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]

	sampleValues->sum -= sampleValues->values[sampleValues->index];
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	699a      	ldr	r2, [r3, #24]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	7d1b      	ldrb	r3, [r3, #20]
 8000af2:	4619      	mov	r1, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000afa:	1ad2      	subs	r2, r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	619a      	str	r2, [r3, #24]
	sampleValues->values[sampleValues->index] = newSample;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	7d1b      	ldrb	r3, [r3, #20]
 8000b04:	4619      	mov	r1, r3
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	sampleValues->sum += sampleValues->values[sampleValues->index];
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	7d1b      	ldrb	r3, [r3, #20]
 8000b16:	4619      	mov	r1, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b1e:	441a      	add	r2, r3
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	619a      	str	r2, [r3, #24]

	sampleValues->index++;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	7d1b      	ldrb	r3, [r3, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	751a      	strb	r2, [r3, #20]
	sampleValues->index %= MEAN_FILTER_SIZE;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	7d1a      	ldrb	r2, [r3, #20]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <meanDiff+0xa4>)
 8000b36:	fba3 1302 	umull	r1, r3, r3, r2
 8000b3a:	0899      	lsrs	r1, r3, #2
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	440b      	add	r3, r1
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	751a      	strb	r2, [r3, #20]

	if (sampleValues->count < MEAN_FILTER_SIZE)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	7f1b      	ldrb	r3, [r3, #28]
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d805      	bhi.n	8000b5e <meanDiff+0x82>
	{
		sampleValues->count++;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	7f1b      	ldrb	r3, [r3, #28]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	771a      	strb	r2, [r3, #28]
	}

	avg = sampleValues->sum / sampleValues->count;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	683a      	ldr	r2, [r7, #0]
 8000b64:	7f12      	ldrb	r2, [r2, #28]
 8000b66:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]

//	printf("AVG:%ld\r\n", avg);

	return avg - newSample;
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	1ad3      	subs	r3, r2, r3
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	cccccccd 	.word	0xcccccccd

08000b84 <__io_putchar>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, &temp, 1, HAL_MAX_DELAY);
 8000b92:	f107 010f 	add.w	r1, r7, #15
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <__io_putchar+0x28>)
 8000b9e:	f002 ff1a 	bl	80039d6 <HAL_UART_Transmit>
  return ch;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000140 	.word	0x20000140

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f000 fc0d 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 f831 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f000 f911 	bl	8000de4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bc2:	f000 f88d 	bl	8000ce0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000bc6:	f000 f8e3 	bl	8000d90 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000bca:	f000 f8b7 	bl	8000d3c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  MAX30102_init(&max30102, &hi2c1);
 8000bce:	4912      	ldr	r1, [pc, #72]	; (8000c18 <main+0x68>)
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <main+0x6c>)
 8000bd2:	f7ff fceb 	bl	80005ac <MAX30102_init>
  MAX30102_reset(&max30102);
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <main+0x6c>)
 8000bd8:	f7ff fd5f 	bl	800069a <MAX30102_reset>
  MAX30102_clearFifo(&max30102);
 8000bdc:	480f      	ldr	r0, [pc, #60]	; (8000c1c <main+0x6c>)
 8000bde:	f7ff ff1c 	bl	8000a1a <MAX30102_clearFifo>
  MAX30102_setFifoConfig(&max30102, max30102_smp_ave_8, 1, 7);
 8000be2:	2307      	movs	r3, #7
 8000be4:	2201      	movs	r2, #1
 8000be6:	2103      	movs	r1, #3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <main+0x6c>)
 8000bea:	f7ff fe5f 	bl	80008ac <MAX30102_setFifoConfig>

  // Set sensor settings and mode
  MAX30102_setSettings(&max30102);
 8000bee:	480b      	ldr	r0, [pc, #44]	; (8000c1c <main+0x6c>)
 8000bf0:	f7ff fd64 	bl	80006bc <MAX30102_setSettings>

  uint8_t en_reg[2] = {0};
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	80bb      	strh	r3, [r7, #4]
  MAX30102_read(&max30102, 0x00, en_reg, 1);
 8000bf8:	1d3a      	adds	r2, r7, #4
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4807      	ldr	r0, [pc, #28]	; (8000c1c <main+0x6c>)
 8000c00:	f7ff fd26 	bl	8000650 <MAX30102_read>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  getGPSValue(&huart4);
	  if (MAX30102_hasInterrupt(&max30102))
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <main+0x6c>)
 8000c06:	f7ff fe16 	bl	8000836 <MAX30102_hasInterrupt>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0f9      	beq.n	8000c04 <main+0x54>
	  {
		  MAX30102_interruptHandler(&max30102);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <main+0x6c>)
 8000c12:	f7ff fe1d 	bl	8000850 <MAX30102_interruptHandler>
	  if (MAX30102_hasInterrupt(&max30102))
 8000c16:	e7f5      	b.n	8000c04 <main+0x54>
 8000c18:	200000a8 	.word	0x200000a8
 8000c1c:	20000184 	.word	0x20000184

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b094      	sub	sp, #80	; 0x50
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2234      	movs	r2, #52	; 0x34
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fc9c 	bl	800456c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <SystemClock_Config+0xb8>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a22      	ldr	r2, [pc, #136]	; (8000cd8 <SystemClock_Config+0xb8>)
 8000c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <SystemClock_Config+0xb8>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <SystemClock_Config+0xbc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <SystemClock_Config+0xbc>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <SystemClock_Config+0xbc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 f905 	bl	8002ea4 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ca0:	f000 f906 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 fdfa 	bl	80028b8 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cca:	f000 f8f1 	bl	8000eb0 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3750      	adds	r7, #80	; 0x50
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <MX_I2C1_Init+0x54>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x58>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_I2C1_Init+0x50>)
 8000d1e:	f000 fe35 	bl	800198c <HAL_I2C_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 f8c2 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200000a8 	.word	0x200000a8
 8000d34:	40005400 	.word	0x40005400
 8000d38:	000186a0 	.word	0x000186a0

08000d3c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MX_UART4_Init+0x50>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_UART4_Init+0x4c>)
 8000d74:	f002 fde2 	bl	800393c <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000d7e:	f000 f897 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000fc 	.word	0x200000fc
 8000d8c:	40004c00 	.word	0x40004c00

08000d90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_USART2_UART_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f002 fdb8 	bl	800393c <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f000 f86d 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000140 	.word	0x20000140
 8000de0:	40004400 	.word	0x40004400

08000de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_GPIO_Init+0xa0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : GPIO9_Pin */
  GPIO_InitStruct.Pin = GPIO9_Pin;
 8000e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e54:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO9_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4619      	mov	r1, r3
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <MX_GPIO_Init+0xa4>)
 8000e66:	f000 fbd9 	bl	800161c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2017      	movs	r0, #23
 8000e70:	f000 fbaa 	bl	80015c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e74:	2017      	movs	r0, #23
 8000e76:	f000 fbc3 	bl	8001600 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020800 	.word	0x40020800

08000e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9e:	f000 fabb 	bl	8001418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40001000 	.word	0x40001000

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_I2C_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12c      	bne.n	8000f88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_I2C_MspInit+0x8c>)
 8000f68:	f000 fb58 	bl	800161c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_I2C_MspInit+0x88>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a32      	ldr	r2, [pc, #200]	; (8001084 <HAL_UART_MspInit+0xe8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12c      	bne.n	8001018 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <HAL_UART_MspInit+0xec>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a30      	ldr	r2, [pc, #192]	; (8001088 <HAL_UART_MspInit+0xec>)
 8000fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_UART_MspInit+0xec>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_UART_MspInit+0xec>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a29      	ldr	r2, [pc, #164]	; (8001088 <HAL_UART_MspInit+0xec>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_UART_MspInit+0xec>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001006:	2308      	movs	r3, #8
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	481e      	ldr	r0, [pc, #120]	; (800108c <HAL_UART_MspInit+0xf0>)
 8001012:	f000 fb03 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001016:	e030      	b.n	800107a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_UART_MspInit+0xf4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12b      	bne.n	800107a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_UART_MspInit+0xec>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_UART_MspInit+0xec>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_UART_MspInit+0xec>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_UART_MspInit+0xec>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_UART_MspInit+0xec>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_UART_MspInit+0xec>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105a:	230c      	movs	r3, #12
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106a:	2307      	movs	r3, #7
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_UART_MspInit+0xf0>)
 8001076:	f000 fad1 	bl	800161c <HAL_GPIO_Init>
}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	; 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40004c00 	.word	0x40004c00
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000
 8001090:	40004400 	.word	0x40004400

08001094 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <HAL_InitTick+0xe4>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a32      	ldr	r2, [pc, #200]	; (8001178 <HAL_InitTick+0xe4>)
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_InitTick+0xe4>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c0:	f107 0210 	add.w	r2, r7, #16
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fd0e 	bl	8002aec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010da:	f001 fcdf 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80010de:	6378      	str	r0, [r7, #52]	; 0x34
 80010e0:	e004      	b.n	80010ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010e2:	f001 fcdb 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80010e6:	4603      	mov	r3, r0
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <HAL_InitTick+0xe8>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	0c9b      	lsrs	r3, r3, #18
 80010f6:	3b01      	subs	r3, #1
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_InitTick+0xec>)
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_InitTick+0xf0>)
 80010fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HAL_InitTick+0xec>)
 8001102:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001106:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_InitTick+0xec>)
 800110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_InitTick+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_InitTick+0xec>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_InitTick+0xec>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001120:	4817      	ldr	r0, [pc, #92]	; (8001180 <HAL_InitTick+0xec>)
 8001122:	f002 f95d 	bl	80033e0 <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800112c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11b      	bne.n	800116c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <HAL_InitTick+0xec>)
 8001136:	f002 f9ad 	bl	8003494 <HAL_TIM_Base_Start_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001140:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001144:	2b00      	cmp	r3, #0
 8001146:	d111      	bne.n	800116c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001148:	2036      	movs	r0, #54	; 0x36
 800114a:	f000 fa59 	bl	8001600 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d808      	bhi.n	8001166 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	2036      	movs	r0, #54	; 0x36
 800115a:	f000 fa35 	bl	80015c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_InitTick+0xf4>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	e002      	b.n	800116c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800116c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001170:	4618      	mov	r0, r3
 8001172:	3738      	adds	r7, #56	; 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	431bde83 	.word	0x431bde83
 8001180:	2000028c 	.word	0x2000028c
 8001184:	40001000 	.word	0x40001000
 8001188:	20000004 	.word	0x20000004

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	MAX30102_setInterruptFlag(&max30102);
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <EXTI9_5_IRQHandler+0x18>)
 80011ea:	f7ff fb16 	bl	800081a <MAX30102_setInterruptFlag>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO9_Pin);
 80011ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011f2:	f000 fba7 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000184 	.word	0x20000184

08001200 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <TIM6_DAC_IRQHandler+0x10>)
 8001206:	f002 f9b5 	bl	8003574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000028c 	.word	0x2000028c

08001214 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e00a      	b.n	800123c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001226:	f3af 8000 	nop.w
 800122a:	4601      	mov	r1, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbf0      	blt.n	8001226 <_read+0x12>
  }

  return len;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e009      	b.n	8001274 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fc8b 	bl	8000b84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf1      	blt.n	8001260 <_write+0x12>
  }
  return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_close>:

int _close(int file)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ae:	605a      	str	r2, [r3, #4]
  return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_isatty>:

int _isatty(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f003 f982 	bl	8004628 <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	220c      	movs	r2, #12
 8001328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <_sbrk+0x64>)
 8001340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20020000 	.word	0x20020000
 8001350:	00000400 	.word	0x00000400
 8001354:	200002d4 	.word	0x200002d4
 8001358:	20000428 	.word	0x20000428

0800135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <SystemInit+0x20>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <SystemInit+0x20>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001386:	490e      	ldr	r1, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800139c:	4c0b      	ldr	r4, [pc, #44]	; (80013cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013aa:	f7ff ffd7 	bl	800135c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ae:	f003 f941 	bl	8004634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff fbfd 	bl	8000bb0 <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013c4:	08004fc0 	.word	0x08004fc0
  ldr r2, =_sbss
 80013c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013cc:	20000428 	.word	0x20000428

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <HAL_Init+0x40>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_Init+0x40>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x40>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f8d8 	bl	80015b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f7ff fe46 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fd58 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008
 800143c:	200002d8 	.word	0x200002d8

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200002d8 	.word	0x200002d8

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4907      	ldr	r1, [pc, #28]	; (80014f4 <__NVIC_EnableIRQ+0x38>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff4c 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015da:	f7ff ff61 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 80015de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	68b9      	ldr	r1, [r7, #8]
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f7ff ffb1 	bl	800154c <NVIC_EncodePriority>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff80 	bl	80014f8 <__NVIC_SetPriority>
}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff54 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e165      	b.n	8001904 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8154 	bne.w	80018fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166a:	2b02      	cmp	r3, #2
 800166c:	d130      	bne.n	80016d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0201 	and.w	r2, r3, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d017      	beq.n	800170c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d123      	bne.n	8001760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	69b9      	ldr	r1, [r7, #24]
 800175c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0203 	and.w	r2, r3, #3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80ae 	beq.w	80018fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_GPIO_Init+0x300>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a5c      	ldr	r2, [pc, #368]	; (800191c <HAL_GPIO_Init+0x300>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b5a      	ldr	r3, [pc, #360]	; (800191c <HAL_GPIO_Init+0x300>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017be:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_GPIO_Init+0x304>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <HAL_GPIO_Init+0x308>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d025      	beq.n	8001836 <HAL_GPIO_Init+0x21a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4e      	ldr	r2, [pc, #312]	; (8001928 <HAL_GPIO_Init+0x30c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d01f      	beq.n	8001832 <HAL_GPIO_Init+0x216>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4d      	ldr	r2, [pc, #308]	; (800192c <HAL_GPIO_Init+0x310>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d019      	beq.n	800182e <HAL_GPIO_Init+0x212>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x314>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x20e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4b      	ldr	r2, [pc, #300]	; (8001934 <HAL_GPIO_Init+0x318>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x20a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_GPIO_Init+0x31c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x206>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <HAL_GPIO_Init+0x320>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x202>
 800181a:	2306      	movs	r3, #6
 800181c:	e00c      	b.n	8001838 <HAL_GPIO_Init+0x21c>
 800181e:	2307      	movs	r3, #7
 8001820:	e00a      	b.n	8001838 <HAL_GPIO_Init+0x21c>
 8001822:	2305      	movs	r3, #5
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x21c>
 8001826:	2304      	movs	r3, #4
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x21c>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x21c>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x21c>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x21c>
 8001836:	2300      	movs	r3, #0
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001848:	4935      	ldr	r1, [pc, #212]	; (8001920 <HAL_GPIO_Init+0x304>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <HAL_GPIO_Init+0x324>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187a:	4a31      	ldr	r2, [pc, #196]	; (8001940 <HAL_GPIO_Init+0x324>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_GPIO_Init+0x324>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <HAL_GPIO_Init+0x324>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_GPIO_Init+0x324>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ce:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_GPIO_Init+0x324>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_GPIO_Init+0x324>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f8:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_GPIO_Init+0x324>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	f67f ae96 	bls.w	8001638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40013800 	.word	0x40013800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021000 	.word	0x40021000
 8001938:	40021400 	.word	0x40021400
 800193c:	40021800 	.word	0x40021800
 8001940:	40013c00 	.word	0x40013c00

08001944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f806 	bl	8001974 <HAL_GPIO_EXTI_Callback>
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e12b      	b.n	8001bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff faaa 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2224      	movs	r2, #36	; 0x24
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019f0:	f001 f854 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a81      	ldr	r2, [pc, #516]	; (8001c00 <HAL_I2C_Init+0x274>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d807      	bhi.n	8001a10 <HAL_I2C_Init+0x84>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a80      	ldr	r2, [pc, #512]	; (8001c04 <HAL_I2C_Init+0x278>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	e006      	b.n	8001a1e <HAL_I2C_Init+0x92>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a7d      	ldr	r2, [pc, #500]	; (8001c08 <HAL_I2C_Init+0x27c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	bf94      	ite	ls
 8001a18:	2301      	movls	r3, #1
 8001a1a:	2300      	movhi	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0e7      	b.n	8001bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4a78      	ldr	r2, [pc, #480]	; (8001c0c <HAL_I2C_Init+0x280>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9b      	lsrs	r3, r3, #18
 8001a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <HAL_I2C_Init+0x274>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d802      	bhi.n	8001a60 <HAL_I2C_Init+0xd4>
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	e009      	b.n	8001a74 <HAL_I2C_Init+0xe8>
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	4a69      	ldr	r2, [pc, #420]	; (8001c10 <HAL_I2C_Init+0x284>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	3301      	adds	r3, #1
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	495c      	ldr	r1, [pc, #368]	; (8001c00 <HAL_I2C_Init+0x274>)
 8001a90:	428b      	cmp	r3, r1
 8001a92:	d819      	bhi.n	8001ac8 <HAL_I2C_Init+0x13c>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e59      	subs	r1, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa2:	1c59      	adds	r1, r3, #1
 8001aa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_I2C_Init+0x138>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1e59      	subs	r1, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac2:	e051      	b.n	8001b68 <HAL_I2C_Init+0x1dc>
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	e04f      	b.n	8001b68 <HAL_I2C_Init+0x1dc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d111      	bne.n	8001af4 <HAL_I2C_Init+0x168>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	440b      	add	r3, r1
 8001ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e012      	b.n	8001b1a <HAL_I2C_Init+0x18e>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1e58      	subs	r0, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	0099      	lsls	r1, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Init+0x196>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e022      	b.n	8001b68 <HAL_I2C_Init+0x1dc>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10e      	bne.n	8001b48 <HAL_I2C_Init+0x1bc>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1e58      	subs	r0, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6859      	ldr	r1, [r3, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	440b      	add	r3, r1
 8001b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b46:	e00f      	b.n	8001b68 <HAL_I2C_Init+0x1dc>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	0099      	lsls	r1, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	6809      	ldr	r1, [r1, #0]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6911      	ldr	r1, [r2, #16]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68d2      	ldr	r2, [r2, #12]
 8001ba2:	4311      	orrs	r1, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	000186a0 	.word	0x000186a0
 8001c04:	001e847f 	.word	0x001e847f
 8001c08:	003d08ff 	.word	0x003d08ff
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	10624dd3 	.word	0x10624dd3

08001c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	817b      	strh	r3, [r7, #10]
 8001c24:	4613      	mov	r3, r2
 8001c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff fc0a 	bl	8001440 <HAL_GetTick>
 8001c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	f040 80e0 	bne.w	8001dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2319      	movs	r3, #25
 8001c42:	2201      	movs	r2, #1
 8001c44:	4970      	ldr	r1, [pc, #448]	; (8001e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fc58 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0d3      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2C_Master_Transmit+0x50>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0cc      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d007      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2221      	movs	r2, #33	; 0x21
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	893a      	ldrh	r2, [r7, #8]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fac2 	bl	800225c <I2C_MasterRequestWrite>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e08d      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cf8:	e066      	b.n	8001dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	6a39      	ldr	r1, [r7, #32]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fcd2 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00d      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d107      	bne.n	8001d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d11b      	bne.n	8001d9c <HAL_I2C_Master_Transmit+0x188>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d017      	beq.n	8001d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6a39      	ldr	r1, [r7, #32]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fcc2 	bl	800272a <I2C_WaitOnBTFFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00d      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d107      	bne.n	8001dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e01a      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d194      	bne.n	8001cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	00100002 	.word	0x00100002
 8001e0c:	ffff0000 	.word	0xffff0000

08001e10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	; 0x30
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	4613      	mov	r3, r2
 8001e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff fb0c 	bl	8001440 <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	f040 820b 	bne.w	800224e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2319      	movs	r3, #25
 8001e3e:	2201      	movs	r2, #1
 8001e40:	497c      	ldr	r1, [pc, #496]	; (8002034 <HAL_I2C_Master_Receive+0x224>)
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fb5a 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e1fe      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_I2C_Master_Receive+0x50>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e1f7      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d007      	beq.n	8001e86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2222      	movs	r2, #34	; 0x22
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	893a      	ldrh	r2, [r7, #8]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4a5c      	ldr	r2, [pc, #368]	; (8002038 <HAL_I2C_Master_Receive+0x228>)
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ec8:	8979      	ldrh	r1, [r7, #10]
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fa46 	bl	8002360 <I2C_MasterRequestRead>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e1b8      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d113      	bne.n	8001f0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	623b      	str	r3, [r7, #32]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	623b      	str	r3, [r7, #32]
 8001efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	e18c      	b.n	8002228 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d11b      	bne.n	8001f4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e16c      	b.n	8002228 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d11b      	bne.n	8001f8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	61bb      	str	r3, [r7, #24]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	e14c      	b.n	8002228 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fb4:	e138      	b.n	8002228 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	f200 80f1 	bhi.w	80021a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d123      	bne.n	8002010 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fbed 	bl	80027ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e139      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800200e:	e10b      	b.n	8002228 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	2b02      	cmp	r3, #2
 8002016:	d14e      	bne.n	80020b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	2200      	movs	r2, #0
 8002020:	4906      	ldr	r1, [pc, #24]	; (800203c <HAL_I2C_Master_Receive+0x22c>)
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fa6a 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e10e      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
 8002032:	bf00      	nop
 8002034:	00100002 	.word	0x00100002
 8002038:	ffff0000 	.word	0xffff0000
 800203c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691a      	ldr	r2, [r3, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020b4:	e0b8      	b.n	8002228 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020bc:	2200      	movs	r2, #0
 80020be:	4966      	ldr	r1, [pc, #408]	; (8002258 <HAL_I2C_Master_Receive+0x448>)
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fa1b 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0bf      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	2200      	movs	r2, #0
 800211a:	494f      	ldr	r1, [pc, #316]	; (8002258 <HAL_I2C_Master_Receive+0x448>)
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f9ed 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e091      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021a0:	e042      	b.n	8002228 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fb00 	bl	80027ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e04c      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d118      	bne.n	8002228 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b00      	cmp	r3, #0
 800222e:	f47f aec2 	bne.w	8001fb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800224e:	2302      	movs	r3, #2
  }
}
 8002250:	4618      	mov	r0, r3
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	00010004 	.word	0x00010004

0800225c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	460b      	mov	r3, r1
 800226a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d006      	beq.n	8002286 <I2C_MasterRequestWrite+0x2a>
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d003      	beq.n	8002286 <I2C_MasterRequestWrite+0x2a>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002284:	d108      	bne.n	8002298 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e00b      	b.n	80022b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	2b12      	cmp	r3, #18
 800229e:	d107      	bne.n	80022b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f91d 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d6:	d103      	bne.n	80022e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e035      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ec:	d108      	bne.n	8002300 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ee:	897b      	ldrh	r3, [r7, #10]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	e01b      	b.n	8002338 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002300:	897b      	ldrh	r3, [r7, #10]
 8002302:	11db      	asrs	r3, r3, #7
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 0306 	and.w	r3, r3, #6
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f063 030f 	orn	r3, r3, #15
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	490e      	ldr	r1, [pc, #56]	; (8002358 <I2C_MasterRequestWrite+0xfc>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f943 	bl	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e010      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800232e:	897b      	ldrh	r3, [r7, #10]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4907      	ldr	r1, [pc, #28]	; (800235c <I2C_MasterRequestWrite+0x100>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f933 	bl	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00010008 	.word	0x00010008
 800235c:	00010002 	.word	0x00010002

08002360 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	460b      	mov	r3, r1
 800236e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002384:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d006      	beq.n	800239a <I2C_MasterRequestRead+0x3a>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d003      	beq.n	800239a <I2C_MasterRequestRead+0x3a>
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002398:	d108      	bne.n	80023ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e00b      	b.n	80023c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	2b11      	cmp	r3, #17
 80023b2:	d107      	bne.n	80023c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f893 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ea:	d103      	bne.n	80023f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e079      	b.n	80024ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002400:	d108      	bne.n	8002414 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	611a      	str	r2, [r3, #16]
 8002412:	e05f      	b.n	80024d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002414:	897b      	ldrh	r3, [r7, #10]
 8002416:	11db      	asrs	r3, r3, #7
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f003 0306 	and.w	r3, r3, #6
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f063 030f 	orn	r3, r3, #15
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4930      	ldr	r1, [pc, #192]	; (80024f4 <I2C_MasterRequestRead+0x194>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f8b9 	bl	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e054      	b.n	80024ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4929      	ldr	r1, [pc, #164]	; (80024f8 <I2C_MasterRequestRead+0x198>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f8a9 	bl	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e044      	b.n	80024ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002486:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f831 	bl	80024fc <I2C_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ae:	d103      	bne.n	80024b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e017      	b.n	80024ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024bc:	897b      	ldrh	r3, [r7, #10]
 80024be:	11db      	asrs	r3, r3, #7
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0306 	and.w	r3, r3, #6
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f063 030e 	orn	r3, r3, #14
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4907      	ldr	r1, [pc, #28]	; (80024f8 <I2C_MasterRequestRead+0x198>)
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f865 	bl	80025aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	00010008 	.word	0x00010008
 80024f8:	00010002 	.word	0x00010002

080024fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800250c:	e025      	b.n	800255a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d021      	beq.n	800255a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7fe ff93 	bl	8001440 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d116      	bne.n	800255a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f043 0220 	orr.w	r2, r3, #32
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e023      	b.n	80025a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d10d      	bne.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	e00c      	b.n	800259a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4013      	ands	r3, r2
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf0c      	ite	eq
 8002592:	2301      	moveq	r3, #1
 8002594:	2300      	movne	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	429a      	cmp	r2, r3
 800259e:	d0b6      	beq.n	800250e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b8:	e051      	b.n	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c8:	d123      	bne.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e046      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d021      	beq.n	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261a:	f7fe ff11 	bl	8001440 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f043 0220 	orr.w	r2, r3, #32
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e020      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d10c      	bne.n	8002682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e00b      	b.n	800269a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	43da      	mvns	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4013      	ands	r3, r2
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d18d      	bne.n	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b4:	e02d      	b.n	8002712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f8ce 	bl	8002858 <I2C_IsAcknowledgeFailed>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e02d      	b.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d021      	beq.n	8002712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe feb7 	bl	8001440 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d116      	bne.n	8002712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f043 0220 	orr.w	r2, r3, #32
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e007      	b.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d1ca      	bne.n	80026b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002736:	e02d      	b.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f88d 	bl	8002858 <I2C_IsAcknowledgeFailed>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e02d      	b.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274e:	d021      	beq.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002750:	f7fe fe76 	bl	8001440 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	429a      	cmp	r2, r3
 800275e:	d302      	bcc.n	8002766 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e007      	b.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d1ca      	bne.n	8002738 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027b8:	e042      	b.n	8002840 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d119      	bne.n	80027fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0210 	mvn.w	r2, #16
 80027d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e029      	b.n	8002850 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fc:	f7fe fe20 	bl	8001440 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d302      	bcc.n	8002812 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d116      	bne.n	8002840 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e007      	b.n	8002850 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d1b5      	bne.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286e:	d11b      	bne.n	80028a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002878:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0cc      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d90c      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0b8      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800290c:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800292e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	494d      	ldr	r1, [pc, #308]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d044      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d119      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e07f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d003      	beq.n	8002976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002972:	2b03      	cmp	r3, #3
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002976:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e067      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002996:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 0203 	bic.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4934      	ldr	r1, [pc, #208]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fd4a 	bl	8001440 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b0:	f7fe fd46 	bl	8001440 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e04f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 020c 	and.w	r2, r3, #12
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1eb      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d8:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d20c      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e032      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4916      	ldr	r1, [pc, #88]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	490e      	ldr	r1, [pc, #56]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a3e:	f000 f887 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	490a      	ldr	r1, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	5ccb      	ldrb	r3, [r1, r3]
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fb18 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023c00 	.word	0x40023c00
 8002a74:	40023800 	.word	0x40023800
 8002a78:	08004f64 	.word	0x08004f64
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20000004 	.word	0x20000004

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08004f74 	.word	0x08004f74

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff ffdc 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0b5b      	lsrs	r3, r3, #13
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08004f74 	.word	0x08004f74

08002aec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	220f      	movs	r2, #15
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_GetClockConfig+0x5c>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_RCC_GetClockConfig+0x60>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40023c00 	.word	0x40023c00

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b0a6      	sub	sp, #152	; 0x98
 8002b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b76:	4bc8      	ldr	r3, [pc, #800]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	f200 817e 	bhi.w	8002e80 <HAL_RCC_GetSysClockFreq+0x330>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002e81 	.word	0x08002e81
 8002b94:	08002e81 	.word	0x08002e81
 8002b98:	08002e81 	.word	0x08002e81
 8002b9c:	08002bc9 	.word	0x08002bc9
 8002ba0:	08002e81 	.word	0x08002e81
 8002ba4:	08002e81 	.word	0x08002e81
 8002ba8:	08002e81 	.word	0x08002e81
 8002bac:	08002bd1 	.word	0x08002bd1
 8002bb0:	08002e81 	.word	0x08002e81
 8002bb4:	08002e81 	.word	0x08002e81
 8002bb8:	08002e81 	.word	0x08002e81
 8002bbc:	08002d3b 	.word	0x08002d3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4bb6      	ldr	r3, [pc, #728]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002bc6:	e15f      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc8:	4bb5      	ldr	r3, [pc, #724]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002bce:	e15b      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd0:	4bb1      	ldr	r3, [pc, #708]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bdc:	4bae      	ldr	r3, [pc, #696]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d031      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be8:	4bab      	ldr	r3, [pc, #684]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	2200      	movs	r2, #0
 8002bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8002c00:	4ba7      	ldr	r3, [pc, #668]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c02:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c06:	462a      	mov	r2, r5
 8002c08:	fb03 f202 	mul.w	r2, r3, r2
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	4621      	mov	r1, r4
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	4aa2      	ldr	r2, [pc, #648]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c18:	4621      	mov	r1, r4
 8002c1a:	fba1 1202 	umull	r1, r2, r1, r2
 8002c1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c20:	460a      	mov	r2, r1
 8002c22:	67ba      	str	r2, [r7, #120]	; 0x78
 8002c24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c26:	4413      	add	r3, r2
 8002c28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c2e:	2200      	movs	r2, #0
 8002c30:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c38:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002c3c:	f7fd fb38 	bl	80002b0 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4613      	mov	r3, r2
 8002c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c4a:	e064      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4c:	4b92      	ldr	r3, [pc, #584]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	2200      	movs	r2, #0
 8002c54:	653b      	str	r3, [r7, #80]	; 0x50
 8002c56:	657a      	str	r2, [r7, #84]	; 0x54
 8002c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c60:	2300      	movs	r3, #0
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c64:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002c68:	4622      	mov	r2, r4
 8002c6a:	462b      	mov	r3, r5
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	0159      	lsls	r1, r3, #5
 8002c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7a:	0150      	lsls	r0, r2, #5
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4621      	mov	r1, r4
 8002c82:	1a51      	subs	r1, r2, r1
 8002c84:	6139      	str	r1, [r7, #16]
 8002c86:	4629      	mov	r1, r5
 8002c88:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c9a:	4659      	mov	r1, fp
 8002c9c:	018b      	lsls	r3, r1, #6
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca4:	4651      	mov	r1, sl
 8002ca6:	018a      	lsls	r2, r1, #6
 8002ca8:	4651      	mov	r1, sl
 8002caa:	ebb2 0801 	subs.w	r8, r2, r1
 8002cae:	4659      	mov	r1, fp
 8002cb0:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc8:	4690      	mov	r8, r2
 8002cca:	4699      	mov	r9, r3
 8002ccc:	4623      	mov	r3, r4
 8002cce:	eb18 0303 	adds.w	r3, r8, r3
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	eb49 0303 	adc.w	r3, r9, r3
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ce8:	4629      	mov	r1, r5
 8002cea:	028b      	lsls	r3, r1, #10
 8002cec:	4621      	mov	r1, r4
 8002cee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	028a      	lsls	r2, r1, #10
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	643b      	str	r3, [r7, #64]	; 0x40
 8002d02:	647a      	str	r2, [r7, #68]	; 0x44
 8002d04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d08:	f7fd fad2 	bl	80002b0 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4613      	mov	r3, r2
 8002d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d16:	4b60      	ldr	r3, [pc, #384]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	3301      	adds	r3, #1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002d28:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d38:	e0a6      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d3a:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d46:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02a      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	2200      	movs	r2, #0
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d64:	2100      	movs	r1, #0
 8002d66:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d68:	fb03 f201 	mul.w	r2, r3, r1
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	fb00 f303 	mul.w	r3, r0, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d76:	fba0 1202 	umull	r1, r2, r0, r2
 8002d7a:	677a      	str	r2, [r7, #116]	; 0x74
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	673a      	str	r2, [r7, #112]	; 0x70
 8002d80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d82:	4413      	add	r3, r2
 8002d84:	677b      	str	r3, [r7, #116]	; 0x74
 8002d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002d90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d94:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002d98:	f7fd fa8a 	bl	80002b0 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4613      	mov	r3, r2
 8002da2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002da6:	e05b      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	2200      	movs	r2, #0
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dba:	623b      	str	r3, [r7, #32]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dc4:	4642      	mov	r2, r8
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	f04f 0000 	mov.w	r0, #0
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	0159      	lsls	r1, r3, #5
 8002dd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd6:	0150      	lsls	r0, r2, #5
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4641      	mov	r1, r8
 8002dde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002de2:	4649      	mov	r1, r9
 8002de4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002df4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002df8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dfc:	ebb2 040a 	subs.w	r4, r2, sl
 8002e00:	eb63 050b 	sbc.w	r5, r3, fp
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	00eb      	lsls	r3, r5, #3
 8002e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e12:	00e2      	lsls	r2, r4, #3
 8002e14:	4614      	mov	r4, r2
 8002e16:	461d      	mov	r5, r3
 8002e18:	4643      	mov	r3, r8
 8002e1a:	18e3      	adds	r3, r4, r3
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	464b      	mov	r3, r9
 8002e20:	eb45 0303 	adc.w	r3, r5, r3
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e32:	4629      	mov	r1, r5
 8002e34:	028b      	lsls	r3, r1, #10
 8002e36:	4621      	mov	r1, r4
 8002e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	028a      	lsls	r2, r1, #10
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	61fa      	str	r2, [r7, #28]
 8002e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e52:	f7fd fa2d 	bl	80002b0 <__aeabi_uldivmod>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	0f1b      	lsrs	r3, r3, #28
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e7e:	e003      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3798      	adds	r7, #152	; 0x98
 8002e90:	46bd      	mov	sp, r7
 8002e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	017d7840 	.word	0x017d7840

08002ea4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e28d      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8083 	beq.w	8002fca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ec4:	4b94      	ldr	r3, [pc, #592]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d019      	beq.n	8002f04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ed0:	4b91      	ldr	r3, [pc, #580]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002edc:	4b8e      	ldr	r3, [pc, #568]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee8:	d00c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d112      	bne.n	8002f1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	4b84      	ldr	r3, [pc, #528]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05b      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x124>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d157      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e25a      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCC_OscConfig+0x90>
 8002f26:	4b7c      	ldr	r3, [pc, #496]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7b      	ldr	r2, [pc, #492]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e01d      	b.n	8002f70 <HAL_RCC_OscConfig+0xcc>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0xb4>
 8002f3e:	4b76      	ldr	r3, [pc, #472]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a75      	ldr	r2, [pc, #468]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b73      	ldr	r3, [pc, #460]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a72      	ldr	r2, [pc, #456]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0xcc>
 8002f58:	4b6f      	ldr	r3, [pc, #444]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6e      	ldr	r2, [pc, #440]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b6c      	ldr	r3, [pc, #432]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6b      	ldr	r2, [pc, #428]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fa62 	bl	8001440 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fa5e 	bl	8001440 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e21f      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b61      	ldr	r3, [pc, #388]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xdc>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fa4e 	bl	8001440 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fa4a 	bl	8001440 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e20b      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	4b57      	ldr	r3, [pc, #348]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x104>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d06f      	beq.n	80030b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fd6:	4b50      	ldr	r3, [pc, #320]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d017      	beq.n	8003012 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fe2:	4b4d      	ldr	r3, [pc, #308]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fee:	4b4a      	ldr	r3, [pc, #296]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffa:	4b47      	ldr	r3, [pc, #284]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d11c      	bne.n	8003040 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b44      	ldr	r3, [pc, #272]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d116      	bne.n	8003040 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	4b41      	ldr	r3, [pc, #260]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_RCC_OscConfig+0x186>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e1d3      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4937      	ldr	r1, [pc, #220]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	e03a      	b.n	80030b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003048:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_RCC_OscConfig+0x278>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fe f9f7 	bl	8001440 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe f9f3 	bl	8001440 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1b4      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b28      	ldr	r3, [pc, #160]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4925      	ldr	r1, [pc, #148]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
 8003088:	e015      	b.n	80030b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_OscConfig+0x278>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe f9d6 	bl	8001440 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003098:	f7fe f9d2 	bl	8001440 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e193      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d036      	beq.n	8003130 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_RCC_OscConfig+0x27c>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe f9b6 	bl	8001440 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe f9b2 	bl	8001440 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e173      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_OscConfig+0x274>)
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x234>
 80030f6:	e01b      	b.n	8003130 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fe f99f 	bl	8001440 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	e00e      	b.n	8003124 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003106:	f7fe f99b 	bl	8001440 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d907      	bls.n	8003124 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e15c      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
 8003118:	40023800 	.word	0x40023800
 800311c:	42470000 	.word	0x42470000
 8003120:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	4b8a      	ldr	r3, [pc, #552]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ea      	bne.n	8003106 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8097 	beq.w	800326c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b83      	ldr	r3, [pc, #524]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10f      	bne.n	800316e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b7f      	ldr	r3, [pc, #508]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	4a7e      	ldr	r2, [pc, #504]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	6413      	str	r3, [r2, #64]	; 0x40
 800315e:	4b7c      	ldr	r3, [pc, #496]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b79      	ldr	r3, [pc, #484]	; (8003354 <HAL_RCC_OscConfig+0x4b0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x4b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x4b0>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fe f95b 	bl	8001440 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fe f957 	bl	8001440 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e118      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x4b0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x31e>
 80031b4:	4b66      	ldr	r3, [pc, #408]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a65      	ldr	r2, [pc, #404]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	e01c      	b.n	80031fc <HAL_RCC_OscConfig+0x358>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x340>
 80031ca:	4b61      	ldr	r3, [pc, #388]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a60      	ldr	r2, [pc, #384]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
 80031d6:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a5d      	ldr	r2, [pc, #372]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
 80031e2:	e00b      	b.n	80031fc <HAL_RCC_OscConfig+0x358>
 80031e4:	4b5a      	ldr	r3, [pc, #360]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a59      	ldr	r2, [pc, #356]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	4b57      	ldr	r3, [pc, #348]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a56      	ldr	r2, [pc, #344]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d015      	beq.n	8003230 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe f91c 	bl	8001440 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe f918 	bl	8001440 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0d7      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003222:	4b4b      	ldr	r3, [pc, #300]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0ee      	beq.n	800320c <HAL_RCC_OscConfig+0x368>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fe f906 	bl	8001440 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe f902 	bl	8001440 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0c1      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324e:	4b40      	ldr	r3, [pc, #256]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ee      	bne.n	8003238 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003260:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	4a3a      	ldr	r2, [pc, #232]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80ad 	beq.w	80033d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b08      	cmp	r3, #8
 8003280:	d060      	beq.n	8003344 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d145      	bne.n	8003316 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b33      	ldr	r3, [pc, #204]	; (8003358 <HAL_RCC_OscConfig+0x4b4>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe f8d6 	bl	8001440 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe f8d2 	bl	8001440 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e093      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b29      	ldr	r3, [pc, #164]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	3b01      	subs	r3, #1
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	071b      	lsls	r3, r3, #28
 80032e2:	491b      	ldr	r1, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x4b4>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe f8a7 	bl	8001440 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fe f8a3 	bl	8001440 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e064      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x452>
 8003314:	e05c      	b.n	80033d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_RCC_OscConfig+0x4b4>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe f890 	bl	8001440 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe f88c 	bl	8001440 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e04d      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCC_OscConfig+0x4ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x480>
 8003342:	e045      	b.n	80033d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e040      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
 8003350:	40023800 	.word	0x40023800
 8003354:	40007000 	.word	0x40007000
 8003358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800335c:	4b1f      	ldr	r3, [pc, #124]	; (80033dc <HAL_RCC_OscConfig+0x538>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d030      	beq.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d129      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d122      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003394:	4293      	cmp	r3, r2
 8003396:	d119      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	3b01      	subs	r3, #1
 80033a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d10f      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f839 	bl	800347e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 f9d8 	bl	80037d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d001      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e04e      	b.n	800354a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a23      	ldr	r2, [pc, #140]	; (8003558 <HAL_TIM_Base_Start_IT+0xc4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d01d      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_TIM_Base_Start_IT+0xc8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <HAL_TIM_Base_Start_IT+0xcc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <HAL_TIM_Base_Start_IT+0xd0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <HAL_TIM_Base_Start_IT+0xd4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_TIM_Base_Start_IT+0xd8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <HAL_TIM_Base_Start_IT+0xdc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d111      	bne.n	8003538 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d010      	beq.n	8003548 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003536:	e007      	b.n	8003548 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40010400 	.word	0x40010400
 800356c:	40014000 	.word	0x40014000
 8003570:	40001800 	.word	0x40001800

08003574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d122      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b02      	cmp	r3, #2
 8003596:	d11b      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0202 	mvn.w	r2, #2
 80035a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f8ee 	bl	8003798 <HAL_TIM_IC_CaptureCallback>
 80035bc:	e005      	b.n	80035ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8e0 	bl	8003784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8f1 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d122      	bne.n	8003624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d11b      	bne.n	8003624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0204 	mvn.w	r2, #4
 80035f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8c4 	bl	8003798 <HAL_TIM_IC_CaptureCallback>
 8003610:	e005      	b.n	800361e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8b6 	bl	8003784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f8c7 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b08      	cmp	r3, #8
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0208 	mvn.w	r2, #8
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2204      	movs	r2, #4
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f89a 	bl	8003798 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f88c 	bl	8003784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f89d 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b10      	cmp	r3, #16
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b10      	cmp	r3, #16
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0210 	mvn.w	r2, #16
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2208      	movs	r2, #8
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f870 	bl	8003798 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f862 	bl	8003784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f873 	bl	80037ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0201 	mvn.w	r2, #1
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fd fbca 	bl	8000e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d10e      	bne.n	8003724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d107      	bne.n	8003724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f902 	bl	8003928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d10e      	bne.n	8003750 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	d107      	bne.n	8003750 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f838 	bl	80037c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b20      	cmp	r3, #32
 800375c:	d10e      	bne.n	800377c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b20      	cmp	r3, #32
 800376a:	d107      	bne.n	800377c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0220 	mvn.w	r2, #32
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8cc 	bl	8003914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <TIM_Base_SetConfig+0x114>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f2:	d00f      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3d      	ldr	r2, [pc, #244]	; (80038ec <TIM_Base_SetConfig+0x118>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <TIM_Base_SetConfig+0x11c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <TIM_Base_SetConfig+0x120>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3a      	ldr	r2, [pc, #232]	; (80038f8 <TIM_Base_SetConfig+0x124>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2f      	ldr	r2, [pc, #188]	; (80038e8 <TIM_Base_SetConfig+0x114>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d027      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <TIM_Base_SetConfig+0x118>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d023      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2b      	ldr	r2, [pc, #172]	; (80038f0 <TIM_Base_SetConfig+0x11c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2a      	ldr	r2, [pc, #168]	; (80038f4 <TIM_Base_SetConfig+0x120>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d01b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a29      	ldr	r2, [pc, #164]	; (80038f8 <TIM_Base_SetConfig+0x124>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d017      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <TIM_Base_SetConfig+0x128>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d013      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <TIM_Base_SetConfig+0x12c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00f      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a26      	ldr	r2, [pc, #152]	; (8003904 <TIM_Base_SetConfig+0x130>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00b      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a25      	ldr	r2, [pc, #148]	; (8003908 <TIM_Base_SetConfig+0x134>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a24      	ldr	r2, [pc, #144]	; (800390c <TIM_Base_SetConfig+0x138>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a23      	ldr	r2, [pc, #140]	; (8003910 <TIM_Base_SetConfig+0x13c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d108      	bne.n	8003898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <TIM_Base_SetConfig+0x114>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_Base_SetConfig+0xf8>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <TIM_Base_SetConfig+0x124>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d103      	bne.n	80038d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	615a      	str	r2, [r3, #20]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40010000 	.word	0x40010000
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00
 80038f8:	40010400 	.word	0x40010400
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800
 8003908:	40001800 	.word	0x40001800
 800390c:	40001c00 	.word	0x40001c00
 8003910:	40002000 	.word	0x40002000

08003914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e03f      	b.n	80039ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fb1a 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f929 	bl	8003bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b08a      	sub	sp, #40	; 0x28
 80039da:	af02      	add	r7, sp, #8
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d17c      	bne.n	8003af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_UART_Transmit+0x2c>
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e075      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit+0x3e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e06e      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2a:	f7fd fd09 	bl	8001440 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x82>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a68:	e02a      	b.n	8003ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f840 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e036      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1cf      	bne.n	8003a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	; 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f810 	bl	8003afa <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e006      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b090      	sub	sp, #64	; 0x40
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	603b      	str	r3, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	e050      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d04c      	beq.n	8003bae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	f7fd fc91 	bl	8001440 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d241      	bcs.n	8003bae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b7e:	623a      	str	r2, [r7, #32]
 8003b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b82:	69f9      	ldr	r1, [r7, #28]
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	e841 2300 	strex	r3, r2, [r1]
 8003b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1e5      	bne.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e00f      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d09f      	beq.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3740      	adds	r7, #64	; 0x40
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bdc:	b0c0      	sub	sp, #256	; 0x100
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	68d9      	ldr	r1, [r3, #12]
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	ea40 0301 	orr.w	r3, r0, r1
 8003c00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c30:	f021 010c 	bic.w	r1, r1, #12
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c52:	6999      	ldr	r1, [r3, #24]
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	ea40 0301 	orr.w	r3, r0, r1
 8003c5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b8f      	ldr	r3, [pc, #572]	; (8003ea4 <UART_SetConfig+0x2cc>)
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d005      	beq.n	8003c78 <UART_SetConfig+0xa0>
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b8d      	ldr	r3, [pc, #564]	; (8003ea8 <UART_SetConfig+0x2d0>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d104      	bne.n	8003c82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7fe ff24 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8003c7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c80:	e003      	b.n	8003c8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c82:	f7fe ff0b 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003c86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c94:	f040 810c 	bne.w	8003eb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ca2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ca6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003caa:	4622      	mov	r2, r4
 8003cac:	462b      	mov	r3, r5
 8003cae:	1891      	adds	r1, r2, r2
 8003cb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cb2:	415b      	adcs	r3, r3
 8003cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cba:	4621      	mov	r1, r4
 8003cbc:	eb12 0801 	adds.w	r8, r2, r1
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	eb43 0901 	adc.w	r9, r3, r1
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cda:	4690      	mov	r8, r2
 8003cdc:	4699      	mov	r9, r3
 8003cde:	4623      	mov	r3, r4
 8003ce0:	eb18 0303 	adds.w	r3, r8, r3
 8003ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ce8:	462b      	mov	r3, r5
 8003cea:	eb49 0303 	adc.w	r3, r9, r3
 8003cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d06:	460b      	mov	r3, r1
 8003d08:	18db      	adds	r3, r3, r3
 8003d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	eb42 0303 	adc.w	r3, r2, r3
 8003d12:	657b      	str	r3, [r7, #84]	; 0x54
 8003d14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d1c:	f7fc fac8 	bl	80002b0 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4b61      	ldr	r3, [pc, #388]	; (8003eac <UART_SetConfig+0x2d4>)
 8003d26:	fba3 2302 	umull	r2, r3, r3, r2
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	011c      	lsls	r4, r3, #4
 8003d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d40:	4642      	mov	r2, r8
 8003d42:	464b      	mov	r3, r9
 8003d44:	1891      	adds	r1, r2, r2
 8003d46:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d48:	415b      	adcs	r3, r3
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d50:	4641      	mov	r1, r8
 8003d52:	eb12 0a01 	adds.w	sl, r2, r1
 8003d56:	4649      	mov	r1, r9
 8003d58:	eb43 0b01 	adc.w	fp, r3, r1
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d70:	4692      	mov	sl, r2
 8003d72:	469b      	mov	fp, r3
 8003d74:	4643      	mov	r3, r8
 8003d76:	eb1a 0303 	adds.w	r3, sl, r3
 8003d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	eb4b 0303 	adc.w	r3, fp, r3
 8003d84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	18db      	adds	r3, r3, r3
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
 8003da2:	4613      	mov	r3, r2
 8003da4:	eb42 0303 	adc.w	r3, r2, r3
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44
 8003daa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003db2:	f7fc fa7d 	bl	80002b0 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <UART_SetConfig+0x2d4>)
 8003dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2264      	movs	r2, #100	; 0x64
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	1acb      	subs	r3, r1, r3
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dd2:	4b36      	ldr	r3, [pc, #216]	; (8003eac <UART_SetConfig+0x2d4>)
 8003dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003de0:	441c      	add	r4, r3
 8003de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003df0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	1891      	adds	r1, r2, r2
 8003dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dfc:	415b      	adcs	r3, r3
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e04:	4641      	mov	r1, r8
 8003e06:	1851      	adds	r1, r2, r1
 8003e08:	6339      	str	r1, [r7, #48]	; 0x30
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	414b      	adcs	r3, r1
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	00cb      	lsls	r3, r1, #3
 8003e20:	4651      	mov	r1, sl
 8003e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e26:	4651      	mov	r1, sl
 8003e28:	00ca      	lsls	r2, r1, #3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4642      	mov	r2, r8
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e38:	464b      	mov	r3, r9
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	eb42 0303 	adc.w	r3, r2, r3
 8003e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e58:	460b      	mov	r3, r1
 8003e5a:	18db      	adds	r3, r3, r3
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	4613      	mov	r3, r2
 8003e60:	eb42 0303 	adc.w	r3, r2, r3
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e6e:	f7fc fa1f 	bl	80002b0 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <UART_SetConfig+0x2d4>)
 8003e78:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	2164      	movs	r1, #100	; 0x64
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	3332      	adds	r3, #50	; 0x32
 8003e8a:	4a08      	ldr	r2, [pc, #32]	; (8003eac <UART_SetConfig+0x2d4>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	f003 0207 	and.w	r2, r3, #7
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4422      	add	r2, r4
 8003e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ea0:	e106      	b.n	80040b0 <UART_SetConfig+0x4d8>
 8003ea2:	bf00      	nop
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	40011400 	.word	0x40011400
 8003eac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ebe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	1891      	adds	r1, r2, r2
 8003ec8:	6239      	str	r1, [r7, #32]
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	1854      	adds	r4, r2, r1
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	eb43 0501 	adc.w	r5, r3, r1
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	00eb      	lsls	r3, r5, #3
 8003ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eea:	00e2      	lsls	r2, r4, #3
 8003eec:	4614      	mov	r4, r2
 8003eee:	461d      	mov	r5, r3
 8003ef0:	4643      	mov	r3, r8
 8003ef2:	18e3      	adds	r3, r4, r3
 8003ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ef8:	464b      	mov	r3, r9
 8003efa:	eb45 0303 	adc.w	r3, r5, r3
 8003efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f1e:	4629      	mov	r1, r5
 8003f20:	008b      	lsls	r3, r1, #2
 8003f22:	4621      	mov	r1, r4
 8003f24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f28:	4621      	mov	r1, r4
 8003f2a:	008a      	lsls	r2, r1, #2
 8003f2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f30:	f7fc f9be 	bl	80002b0 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4b60      	ldr	r3, [pc, #384]	; (80040bc <UART_SetConfig+0x4e4>)
 8003f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	011c      	lsls	r4, r3, #4
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	61b9      	str	r1, [r7, #24]
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f64:	4641      	mov	r1, r8
 8003f66:	1851      	adds	r1, r2, r1
 8003f68:	6139      	str	r1, [r7, #16]
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	414b      	adcs	r3, r1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	00cb      	lsls	r3, r1, #3
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f86:	4651      	mov	r1, sl
 8003f88:	00ca      	lsls	r2, r1, #3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4642      	mov	r2, r8
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f98:	464b      	mov	r3, r9
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	008b      	lsls	r3, r1, #2
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	008a      	lsls	r2, r1, #2
 8003fca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fce:	f7fc f96f 	bl	80002b0 <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4b38      	ldr	r3, [pc, #224]	; (80040bc <UART_SetConfig+0x4e4>)
 8003fda:	fba3 2301 	umull	r2, r3, r3, r1
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2264      	movs	r2, #100	; 0x64
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	1acb      	subs	r3, r1, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <UART_SetConfig+0x4e4>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff8:	441c      	add	r4, r3
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	673b      	str	r3, [r7, #112]	; 0x70
 8004002:	677a      	str	r2, [r7, #116]	; 0x74
 8004004:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004008:	4642      	mov	r2, r8
 800400a:	464b      	mov	r3, r9
 800400c:	1891      	adds	r1, r2, r2
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	415b      	adcs	r3, r3
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004018:	4641      	mov	r1, r8
 800401a:	1851      	adds	r1, r2, r1
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	4649      	mov	r1, r9
 8004020:	414b      	adcs	r3, r1
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004030:	4659      	mov	r1, fp
 8004032:	00cb      	lsls	r3, r1, #3
 8004034:	4651      	mov	r1, sl
 8004036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403a:	4651      	mov	r1, sl
 800403c:	00ca      	lsls	r2, r1, #3
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	4603      	mov	r3, r0
 8004044:	4642      	mov	r2, r8
 8004046:	189b      	adds	r3, r3, r2
 8004048:	66bb      	str	r3, [r7, #104]	; 0x68
 800404a:	464b      	mov	r3, r9
 800404c:	460a      	mov	r2, r1
 800404e:	eb42 0303 	adc.w	r3, r2, r3
 8004052:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	663b      	str	r3, [r7, #96]	; 0x60
 800405e:	667a      	str	r2, [r7, #100]	; 0x64
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800406c:	4649      	mov	r1, r9
 800406e:	008b      	lsls	r3, r1, #2
 8004070:	4641      	mov	r1, r8
 8004072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004076:	4641      	mov	r1, r8
 8004078:	008a      	lsls	r2, r1, #2
 800407a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800407e:	f7fc f917 	bl	80002b0 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <UART_SetConfig+0x4e4>)
 8004088:	fba3 1302 	umull	r1, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	2164      	movs	r1, #100	; 0x64
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	3332      	adds	r3, #50	; 0x32
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <UART_SetConfig+0x4e4>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4422      	add	r2, r4
 80040ae:	609a      	str	r2, [r3, #8]
}
 80040b0:	bf00      	nop
 80040b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040b6:	46bd      	mov	sp, r7
 80040b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040bc:	51eb851f 	.word	0x51eb851f

080040c0 <malloc>:
 80040c0:	4b02      	ldr	r3, [pc, #8]	; (80040cc <malloc+0xc>)
 80040c2:	4601      	mov	r1, r0
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	f000 b82b 	b.w	8004120 <_malloc_r>
 80040ca:	bf00      	nop
 80040cc:	20000064 	.word	0x20000064

080040d0 <free>:
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <free+0xc>)
 80040d2:	4601      	mov	r1, r0
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	f000 bae1 	b.w	800469c <_free_r>
 80040da:	bf00      	nop
 80040dc:	20000064 	.word	0x20000064

080040e0 <sbrk_aligned>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	4e0e      	ldr	r6, [pc, #56]	; (800411c <sbrk_aligned+0x3c>)
 80040e4:	460c      	mov	r4, r1
 80040e6:	6831      	ldr	r1, [r6, #0]
 80040e8:	4605      	mov	r5, r0
 80040ea:	b911      	cbnz	r1, 80040f2 <sbrk_aligned+0x12>
 80040ec:	f000 fa7a 	bl	80045e4 <_sbrk_r>
 80040f0:	6030      	str	r0, [r6, #0]
 80040f2:	4621      	mov	r1, r4
 80040f4:	4628      	mov	r0, r5
 80040f6:	f000 fa75 	bl	80045e4 <_sbrk_r>
 80040fa:	1c43      	adds	r3, r0, #1
 80040fc:	d00a      	beq.n	8004114 <sbrk_aligned+0x34>
 80040fe:	1cc4      	adds	r4, r0, #3
 8004100:	f024 0403 	bic.w	r4, r4, #3
 8004104:	42a0      	cmp	r0, r4
 8004106:	d007      	beq.n	8004118 <sbrk_aligned+0x38>
 8004108:	1a21      	subs	r1, r4, r0
 800410a:	4628      	mov	r0, r5
 800410c:	f000 fa6a 	bl	80045e4 <_sbrk_r>
 8004110:	3001      	adds	r0, #1
 8004112:	d101      	bne.n	8004118 <sbrk_aligned+0x38>
 8004114:	f04f 34ff 	mov.w	r4, #4294967295
 8004118:	4620      	mov	r0, r4
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	200002e0 	.word	0x200002e0

08004120 <_malloc_r>:
 8004120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004124:	1ccd      	adds	r5, r1, #3
 8004126:	f025 0503 	bic.w	r5, r5, #3
 800412a:	3508      	adds	r5, #8
 800412c:	2d0c      	cmp	r5, #12
 800412e:	bf38      	it	cc
 8004130:	250c      	movcc	r5, #12
 8004132:	2d00      	cmp	r5, #0
 8004134:	4607      	mov	r7, r0
 8004136:	db01      	blt.n	800413c <_malloc_r+0x1c>
 8004138:	42a9      	cmp	r1, r5
 800413a:	d905      	bls.n	8004148 <_malloc_r+0x28>
 800413c:	230c      	movs	r3, #12
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	2600      	movs	r6, #0
 8004142:	4630      	mov	r0, r6
 8004144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004148:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800421c <_malloc_r+0xfc>
 800414c:	f000 f868 	bl	8004220 <__malloc_lock>
 8004150:	f8d8 3000 	ldr.w	r3, [r8]
 8004154:	461c      	mov	r4, r3
 8004156:	bb5c      	cbnz	r4, 80041b0 <_malloc_r+0x90>
 8004158:	4629      	mov	r1, r5
 800415a:	4638      	mov	r0, r7
 800415c:	f7ff ffc0 	bl	80040e0 <sbrk_aligned>
 8004160:	1c43      	adds	r3, r0, #1
 8004162:	4604      	mov	r4, r0
 8004164:	d155      	bne.n	8004212 <_malloc_r+0xf2>
 8004166:	f8d8 4000 	ldr.w	r4, [r8]
 800416a:	4626      	mov	r6, r4
 800416c:	2e00      	cmp	r6, #0
 800416e:	d145      	bne.n	80041fc <_malloc_r+0xdc>
 8004170:	2c00      	cmp	r4, #0
 8004172:	d048      	beq.n	8004206 <_malloc_r+0xe6>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	4631      	mov	r1, r6
 8004178:	4638      	mov	r0, r7
 800417a:	eb04 0903 	add.w	r9, r4, r3
 800417e:	f000 fa31 	bl	80045e4 <_sbrk_r>
 8004182:	4581      	cmp	r9, r0
 8004184:	d13f      	bne.n	8004206 <_malloc_r+0xe6>
 8004186:	6821      	ldr	r1, [r4, #0]
 8004188:	1a6d      	subs	r5, r5, r1
 800418a:	4629      	mov	r1, r5
 800418c:	4638      	mov	r0, r7
 800418e:	f7ff ffa7 	bl	80040e0 <sbrk_aligned>
 8004192:	3001      	adds	r0, #1
 8004194:	d037      	beq.n	8004206 <_malloc_r+0xe6>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	442b      	add	r3, r5
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	f8d8 3000 	ldr.w	r3, [r8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d038      	beq.n	8004216 <_malloc_r+0xf6>
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	42a2      	cmp	r2, r4
 80041a8:	d12b      	bne.n	8004202 <_malloc_r+0xe2>
 80041aa:	2200      	movs	r2, #0
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	e00f      	b.n	80041d0 <_malloc_r+0xb0>
 80041b0:	6822      	ldr	r2, [r4, #0]
 80041b2:	1b52      	subs	r2, r2, r5
 80041b4:	d41f      	bmi.n	80041f6 <_malloc_r+0xd6>
 80041b6:	2a0b      	cmp	r2, #11
 80041b8:	d917      	bls.n	80041ea <_malloc_r+0xca>
 80041ba:	1961      	adds	r1, r4, r5
 80041bc:	42a3      	cmp	r3, r4
 80041be:	6025      	str	r5, [r4, #0]
 80041c0:	bf18      	it	ne
 80041c2:	6059      	strne	r1, [r3, #4]
 80041c4:	6863      	ldr	r3, [r4, #4]
 80041c6:	bf08      	it	eq
 80041c8:	f8c8 1000 	streq.w	r1, [r8]
 80041cc:	5162      	str	r2, [r4, r5]
 80041ce:	604b      	str	r3, [r1, #4]
 80041d0:	4638      	mov	r0, r7
 80041d2:	f104 060b 	add.w	r6, r4, #11
 80041d6:	f000 f829 	bl	800422c <__malloc_unlock>
 80041da:	f026 0607 	bic.w	r6, r6, #7
 80041de:	1d23      	adds	r3, r4, #4
 80041e0:	1af2      	subs	r2, r6, r3
 80041e2:	d0ae      	beq.n	8004142 <_malloc_r+0x22>
 80041e4:	1b9b      	subs	r3, r3, r6
 80041e6:	50a3      	str	r3, [r4, r2]
 80041e8:	e7ab      	b.n	8004142 <_malloc_r+0x22>
 80041ea:	42a3      	cmp	r3, r4
 80041ec:	6862      	ldr	r2, [r4, #4]
 80041ee:	d1dd      	bne.n	80041ac <_malloc_r+0x8c>
 80041f0:	f8c8 2000 	str.w	r2, [r8]
 80041f4:	e7ec      	b.n	80041d0 <_malloc_r+0xb0>
 80041f6:	4623      	mov	r3, r4
 80041f8:	6864      	ldr	r4, [r4, #4]
 80041fa:	e7ac      	b.n	8004156 <_malloc_r+0x36>
 80041fc:	4634      	mov	r4, r6
 80041fe:	6876      	ldr	r6, [r6, #4]
 8004200:	e7b4      	b.n	800416c <_malloc_r+0x4c>
 8004202:	4613      	mov	r3, r2
 8004204:	e7cc      	b.n	80041a0 <_malloc_r+0x80>
 8004206:	230c      	movs	r3, #12
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	4638      	mov	r0, r7
 800420c:	f000 f80e 	bl	800422c <__malloc_unlock>
 8004210:	e797      	b.n	8004142 <_malloc_r+0x22>
 8004212:	6025      	str	r5, [r4, #0]
 8004214:	e7dc      	b.n	80041d0 <_malloc_r+0xb0>
 8004216:	605b      	str	r3, [r3, #4]
 8004218:	deff      	udf	#255	; 0xff
 800421a:	bf00      	nop
 800421c:	200002dc 	.word	0x200002dc

08004220 <__malloc_lock>:
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <__malloc_lock+0x8>)
 8004222:	f000 ba2b 	b.w	800467c <__retarget_lock_acquire_recursive>
 8004226:	bf00      	nop
 8004228:	20000424 	.word	0x20000424

0800422c <__malloc_unlock>:
 800422c:	4801      	ldr	r0, [pc, #4]	; (8004234 <__malloc_unlock+0x8>)
 800422e:	f000 ba26 	b.w	800467e <__retarget_lock_release_recursive>
 8004232:	bf00      	nop
 8004234:	20000424 	.word	0x20000424

08004238 <std>:
 8004238:	2300      	movs	r3, #0
 800423a:	b510      	push	{r4, lr}
 800423c:	4604      	mov	r4, r0
 800423e:	e9c0 3300 	strd	r3, r3, [r0]
 8004242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004246:	6083      	str	r3, [r0, #8]
 8004248:	8181      	strh	r1, [r0, #12]
 800424a:	6643      	str	r3, [r0, #100]	; 0x64
 800424c:	81c2      	strh	r2, [r0, #14]
 800424e:	6183      	str	r3, [r0, #24]
 8004250:	4619      	mov	r1, r3
 8004252:	2208      	movs	r2, #8
 8004254:	305c      	adds	r0, #92	; 0x5c
 8004256:	f000 f989 	bl	800456c <memset>
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <std+0x38>)
 800425c:	6263      	str	r3, [r4, #36]	; 0x24
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <std+0x3c>)
 8004260:	62a3      	str	r3, [r4, #40]	; 0x28
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <std+0x40>)
 8004264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <std+0x44>)
 8004268:	6224      	str	r4, [r4, #32]
 800426a:	6323      	str	r3, [r4, #48]	; 0x30
 800426c:	bd10      	pop	{r4, pc}
 800426e:	bf00      	nop
 8004270:	080043bd 	.word	0x080043bd
 8004274:	080043df 	.word	0x080043df
 8004278:	08004417 	.word	0x08004417
 800427c:	0800443b 	.word	0x0800443b

08004280 <stdio_exit_handler>:
 8004280:	4a02      	ldr	r2, [pc, #8]	; (800428c <stdio_exit_handler+0xc>)
 8004282:	4903      	ldr	r1, [pc, #12]	; (8004290 <stdio_exit_handler+0x10>)
 8004284:	4803      	ldr	r0, [pc, #12]	; (8004294 <stdio_exit_handler+0x14>)
 8004286:	f000 b869 	b.w	800435c <_fwalk_sglue>
 800428a:	bf00      	nop
 800428c:	2000000c 	.word	0x2000000c
 8004290:	08004de9 	.word	0x08004de9
 8004294:	20000018 	.word	0x20000018

08004298 <cleanup_stdio>:
 8004298:	6841      	ldr	r1, [r0, #4]
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <cleanup_stdio+0x34>)
 800429c:	4299      	cmp	r1, r3
 800429e:	b510      	push	{r4, lr}
 80042a0:	4604      	mov	r4, r0
 80042a2:	d001      	beq.n	80042a8 <cleanup_stdio+0x10>
 80042a4:	f000 fda0 	bl	8004de8 <_fflush_r>
 80042a8:	68a1      	ldr	r1, [r4, #8]
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <cleanup_stdio+0x38>)
 80042ac:	4299      	cmp	r1, r3
 80042ae:	d002      	beq.n	80042b6 <cleanup_stdio+0x1e>
 80042b0:	4620      	mov	r0, r4
 80042b2:	f000 fd99 	bl	8004de8 <_fflush_r>
 80042b6:	68e1      	ldr	r1, [r4, #12]
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <cleanup_stdio+0x3c>)
 80042ba:	4299      	cmp	r1, r3
 80042bc:	d004      	beq.n	80042c8 <cleanup_stdio+0x30>
 80042be:	4620      	mov	r0, r4
 80042c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042c4:	f000 bd90 	b.w	8004de8 <_fflush_r>
 80042c8:	bd10      	pop	{r4, pc}
 80042ca:	bf00      	nop
 80042cc:	200002e4 	.word	0x200002e4
 80042d0:	2000034c 	.word	0x2000034c
 80042d4:	200003b4 	.word	0x200003b4

080042d8 <global_stdio_init.part.0>:
 80042d8:	b510      	push	{r4, lr}
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <global_stdio_init.part.0+0x30>)
 80042dc:	4c0b      	ldr	r4, [pc, #44]	; (800430c <global_stdio_init.part.0+0x34>)
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <global_stdio_init.part.0+0x38>)
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	4620      	mov	r0, r4
 80042e4:	2200      	movs	r2, #0
 80042e6:	2104      	movs	r1, #4
 80042e8:	f7ff ffa6 	bl	8004238 <std>
 80042ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80042f0:	2201      	movs	r2, #1
 80042f2:	2109      	movs	r1, #9
 80042f4:	f7ff ffa0 	bl	8004238 <std>
 80042f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80042fc:	2202      	movs	r2, #2
 80042fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004302:	2112      	movs	r1, #18
 8004304:	f7ff bf98 	b.w	8004238 <std>
 8004308:	2000041c 	.word	0x2000041c
 800430c:	200002e4 	.word	0x200002e4
 8004310:	08004281 	.word	0x08004281

08004314 <__sfp_lock_acquire>:
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <__sfp_lock_acquire+0x8>)
 8004316:	f000 b9b1 	b.w	800467c <__retarget_lock_acquire_recursive>
 800431a:	bf00      	nop
 800431c:	20000425 	.word	0x20000425

08004320 <__sfp_lock_release>:
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <__sfp_lock_release+0x8>)
 8004322:	f000 b9ac 	b.w	800467e <__retarget_lock_release_recursive>
 8004326:	bf00      	nop
 8004328:	20000425 	.word	0x20000425

0800432c <__sinit>:
 800432c:	b510      	push	{r4, lr}
 800432e:	4604      	mov	r4, r0
 8004330:	f7ff fff0 	bl	8004314 <__sfp_lock_acquire>
 8004334:	6a23      	ldr	r3, [r4, #32]
 8004336:	b11b      	cbz	r3, 8004340 <__sinit+0x14>
 8004338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800433c:	f7ff bff0 	b.w	8004320 <__sfp_lock_release>
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <__sinit+0x28>)
 8004342:	6223      	str	r3, [r4, #32]
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <__sinit+0x2c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f5      	bne.n	8004338 <__sinit+0xc>
 800434c:	f7ff ffc4 	bl	80042d8 <global_stdio_init.part.0>
 8004350:	e7f2      	b.n	8004338 <__sinit+0xc>
 8004352:	bf00      	nop
 8004354:	08004299 	.word	0x08004299
 8004358:	2000041c 	.word	0x2000041c

0800435c <_fwalk_sglue>:
 800435c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004360:	4607      	mov	r7, r0
 8004362:	4688      	mov	r8, r1
 8004364:	4614      	mov	r4, r2
 8004366:	2600      	movs	r6, #0
 8004368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800436c:	f1b9 0901 	subs.w	r9, r9, #1
 8004370:	d505      	bpl.n	800437e <_fwalk_sglue+0x22>
 8004372:	6824      	ldr	r4, [r4, #0]
 8004374:	2c00      	cmp	r4, #0
 8004376:	d1f7      	bne.n	8004368 <_fwalk_sglue+0xc>
 8004378:	4630      	mov	r0, r6
 800437a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800437e:	89ab      	ldrh	r3, [r5, #12]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d907      	bls.n	8004394 <_fwalk_sglue+0x38>
 8004384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004388:	3301      	adds	r3, #1
 800438a:	d003      	beq.n	8004394 <_fwalk_sglue+0x38>
 800438c:	4629      	mov	r1, r5
 800438e:	4638      	mov	r0, r7
 8004390:	47c0      	blx	r8
 8004392:	4306      	orrs	r6, r0
 8004394:	3568      	adds	r5, #104	; 0x68
 8004396:	e7e9      	b.n	800436c <_fwalk_sglue+0x10>

08004398 <iprintf>:
 8004398:	b40f      	push	{r0, r1, r2, r3}
 800439a:	b507      	push	{r0, r1, r2, lr}
 800439c:	4906      	ldr	r1, [pc, #24]	; (80043b8 <iprintf+0x20>)
 800439e:	ab04      	add	r3, sp, #16
 80043a0:	6808      	ldr	r0, [r1, #0]
 80043a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043a6:	6881      	ldr	r1, [r0, #8]
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	f000 f9ed 	bl	8004788 <_vfiprintf_r>
 80043ae:	b003      	add	sp, #12
 80043b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043b4:	b004      	add	sp, #16
 80043b6:	4770      	bx	lr
 80043b8:	20000064 	.word	0x20000064

080043bc <__sread>:
 80043bc:	b510      	push	{r4, lr}
 80043be:	460c      	mov	r4, r1
 80043c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c4:	f000 f8fc 	bl	80045c0 <_read_r>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	bfab      	itete	ge
 80043cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043ce:	89a3      	ldrhlt	r3, [r4, #12]
 80043d0:	181b      	addge	r3, r3, r0
 80043d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043d6:	bfac      	ite	ge
 80043d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043da:	81a3      	strhlt	r3, [r4, #12]
 80043dc:	bd10      	pop	{r4, pc}

080043de <__swrite>:
 80043de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e2:	461f      	mov	r7, r3
 80043e4:	898b      	ldrh	r3, [r1, #12]
 80043e6:	05db      	lsls	r3, r3, #23
 80043e8:	4605      	mov	r5, r0
 80043ea:	460c      	mov	r4, r1
 80043ec:	4616      	mov	r6, r2
 80043ee:	d505      	bpl.n	80043fc <__swrite+0x1e>
 80043f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f4:	2302      	movs	r3, #2
 80043f6:	2200      	movs	r2, #0
 80043f8:	f000 f8d0 	bl	800459c <_lseek_r>
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004406:	81a3      	strh	r3, [r4, #12]
 8004408:	4632      	mov	r2, r6
 800440a:	463b      	mov	r3, r7
 800440c:	4628      	mov	r0, r5
 800440e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004412:	f000 b8f7 	b.w	8004604 <_write_r>

08004416 <__sseek>:
 8004416:	b510      	push	{r4, lr}
 8004418:	460c      	mov	r4, r1
 800441a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441e:	f000 f8bd 	bl	800459c <_lseek_r>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	bf15      	itete	ne
 8004428:	6560      	strne	r0, [r4, #84]	; 0x54
 800442a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800442e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004432:	81a3      	strheq	r3, [r4, #12]
 8004434:	bf18      	it	ne
 8004436:	81a3      	strhne	r3, [r4, #12]
 8004438:	bd10      	pop	{r4, pc}

0800443a <__sclose>:
 800443a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800443e:	f000 b89d 	b.w	800457c <_close_r>

08004442 <__swbuf_r>:
 8004442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004444:	460e      	mov	r6, r1
 8004446:	4614      	mov	r4, r2
 8004448:	4605      	mov	r5, r0
 800444a:	b118      	cbz	r0, 8004454 <__swbuf_r+0x12>
 800444c:	6a03      	ldr	r3, [r0, #32]
 800444e:	b90b      	cbnz	r3, 8004454 <__swbuf_r+0x12>
 8004450:	f7ff ff6c 	bl	800432c <__sinit>
 8004454:	69a3      	ldr	r3, [r4, #24]
 8004456:	60a3      	str	r3, [r4, #8]
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	071a      	lsls	r2, r3, #28
 800445c:	d525      	bpl.n	80044aa <__swbuf_r+0x68>
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	b31b      	cbz	r3, 80044aa <__swbuf_r+0x68>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	6922      	ldr	r2, [r4, #16]
 8004466:	1a98      	subs	r0, r3, r2
 8004468:	6963      	ldr	r3, [r4, #20]
 800446a:	b2f6      	uxtb	r6, r6
 800446c:	4283      	cmp	r3, r0
 800446e:	4637      	mov	r7, r6
 8004470:	dc04      	bgt.n	800447c <__swbuf_r+0x3a>
 8004472:	4621      	mov	r1, r4
 8004474:	4628      	mov	r0, r5
 8004476:	f000 fcb7 	bl	8004de8 <_fflush_r>
 800447a:	b9e0      	cbnz	r0, 80044b6 <__swbuf_r+0x74>
 800447c:	68a3      	ldr	r3, [r4, #8]
 800447e:	3b01      	subs	r3, #1
 8004480:	60a3      	str	r3, [r4, #8]
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	701e      	strb	r6, [r3, #0]
 800448a:	6962      	ldr	r2, [r4, #20]
 800448c:	1c43      	adds	r3, r0, #1
 800448e:	429a      	cmp	r2, r3
 8004490:	d004      	beq.n	800449c <__swbuf_r+0x5a>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	07db      	lsls	r3, r3, #31
 8004496:	d506      	bpl.n	80044a6 <__swbuf_r+0x64>
 8004498:	2e0a      	cmp	r6, #10
 800449a:	d104      	bne.n	80044a6 <__swbuf_r+0x64>
 800449c:	4621      	mov	r1, r4
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 fca2 	bl	8004de8 <_fflush_r>
 80044a4:	b938      	cbnz	r0, 80044b6 <__swbuf_r+0x74>
 80044a6:	4638      	mov	r0, r7
 80044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 f805 	bl	80044bc <__swsetup_r>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d0d5      	beq.n	8004462 <__swbuf_r+0x20>
 80044b6:	f04f 37ff 	mov.w	r7, #4294967295
 80044ba:	e7f4      	b.n	80044a6 <__swbuf_r+0x64>

080044bc <__swsetup_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <__swsetup_r+0xac>)
 80044c0:	4605      	mov	r5, r0
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	460c      	mov	r4, r1
 80044c6:	b118      	cbz	r0, 80044d0 <__swsetup_r+0x14>
 80044c8:	6a03      	ldr	r3, [r0, #32]
 80044ca:	b90b      	cbnz	r3, 80044d0 <__swsetup_r+0x14>
 80044cc:	f7ff ff2e 	bl	800432c <__sinit>
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044d6:	0718      	lsls	r0, r3, #28
 80044d8:	d422      	bmi.n	8004520 <__swsetup_r+0x64>
 80044da:	06d9      	lsls	r1, r3, #27
 80044dc:	d407      	bmi.n	80044ee <__swsetup_r+0x32>
 80044de:	2309      	movs	r3, #9
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	e034      	b.n	8004558 <__swsetup_r+0x9c>
 80044ee:	0758      	lsls	r0, r3, #29
 80044f0:	d512      	bpl.n	8004518 <__swsetup_r+0x5c>
 80044f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044f4:	b141      	cbz	r1, 8004508 <__swsetup_r+0x4c>
 80044f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044fa:	4299      	cmp	r1, r3
 80044fc:	d002      	beq.n	8004504 <__swsetup_r+0x48>
 80044fe:	4628      	mov	r0, r5
 8004500:	f000 f8cc 	bl	800469c <_free_r>
 8004504:	2300      	movs	r3, #0
 8004506:	6363      	str	r3, [r4, #52]	; 0x34
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800450e:	81a3      	strh	r3, [r4, #12]
 8004510:	2300      	movs	r3, #0
 8004512:	6063      	str	r3, [r4, #4]
 8004514:	6923      	ldr	r3, [r4, #16]
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	f043 0308 	orr.w	r3, r3, #8
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	6923      	ldr	r3, [r4, #16]
 8004522:	b94b      	cbnz	r3, 8004538 <__swsetup_r+0x7c>
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800452a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452e:	d003      	beq.n	8004538 <__swsetup_r+0x7c>
 8004530:	4621      	mov	r1, r4
 8004532:	4628      	mov	r0, r5
 8004534:	f000 fca6 	bl	8004e84 <__smakebuf_r>
 8004538:	89a0      	ldrh	r0, [r4, #12]
 800453a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800453e:	f010 0301 	ands.w	r3, r0, #1
 8004542:	d00a      	beq.n	800455a <__swsetup_r+0x9e>
 8004544:	2300      	movs	r3, #0
 8004546:	60a3      	str	r3, [r4, #8]
 8004548:	6963      	ldr	r3, [r4, #20]
 800454a:	425b      	negs	r3, r3
 800454c:	61a3      	str	r3, [r4, #24]
 800454e:	6923      	ldr	r3, [r4, #16]
 8004550:	b943      	cbnz	r3, 8004564 <__swsetup_r+0xa8>
 8004552:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004556:	d1c4      	bne.n	80044e2 <__swsetup_r+0x26>
 8004558:	bd38      	pop	{r3, r4, r5, pc}
 800455a:	0781      	lsls	r1, r0, #30
 800455c:	bf58      	it	pl
 800455e:	6963      	ldrpl	r3, [r4, #20]
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	e7f4      	b.n	800454e <__swsetup_r+0x92>
 8004564:	2000      	movs	r0, #0
 8004566:	e7f7      	b.n	8004558 <__swsetup_r+0x9c>
 8004568:	20000064 	.word	0x20000064

0800456c <memset>:
 800456c:	4402      	add	r2, r0
 800456e:	4603      	mov	r3, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <_close_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d06      	ldr	r5, [pc, #24]	; (8004598 <_close_r+0x1c>)
 8004580:	2300      	movs	r3, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	f7fc fe7d 	bl	8001286 <_close>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_close_r+0x1a>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_close_r+0x1a>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20000420 	.word	0x20000420

0800459c <_lseek_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d07      	ldr	r5, [pc, #28]	; (80045bc <_lseek_r+0x20>)
 80045a0:	4604      	mov	r4, r0
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	602a      	str	r2, [r5, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7fc fe92 	bl	80012d4 <_lseek>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_lseek_r+0x1e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_lseek_r+0x1e>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	20000420 	.word	0x20000420

080045c0 <_read_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4d07      	ldr	r5, [pc, #28]	; (80045e0 <_read_r+0x20>)
 80045c4:	4604      	mov	r4, r0
 80045c6:	4608      	mov	r0, r1
 80045c8:	4611      	mov	r1, r2
 80045ca:	2200      	movs	r2, #0
 80045cc:	602a      	str	r2, [r5, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f7fc fe20 	bl	8001214 <_read>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_read_r+0x1e>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_read_r+0x1e>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	20000420 	.word	0x20000420

080045e4 <_sbrk_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d06      	ldr	r5, [pc, #24]	; (8004600 <_sbrk_r+0x1c>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	f7fc fe7e 	bl	80012f0 <_sbrk>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_sbrk_r+0x1a>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_sbrk_r+0x1a>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	20000420 	.word	0x20000420

08004604 <_write_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4d07      	ldr	r5, [pc, #28]	; (8004624 <_write_r+0x20>)
 8004608:	4604      	mov	r4, r0
 800460a:	4608      	mov	r0, r1
 800460c:	4611      	mov	r1, r2
 800460e:	2200      	movs	r2, #0
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	f7fc fe1b 	bl	800124e <_write>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_write_r+0x1e>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_write_r+0x1e>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20000420 	.word	0x20000420

08004628 <__errno>:
 8004628:	4b01      	ldr	r3, [pc, #4]	; (8004630 <__errno+0x8>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000064 	.word	0x20000064

08004634 <__libc_init_array>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	4d0d      	ldr	r5, [pc, #52]	; (800466c <__libc_init_array+0x38>)
 8004638:	4c0d      	ldr	r4, [pc, #52]	; (8004670 <__libc_init_array+0x3c>)
 800463a:	1b64      	subs	r4, r4, r5
 800463c:	10a4      	asrs	r4, r4, #2
 800463e:	2600      	movs	r6, #0
 8004640:	42a6      	cmp	r6, r4
 8004642:	d109      	bne.n	8004658 <__libc_init_array+0x24>
 8004644:	4d0b      	ldr	r5, [pc, #44]	; (8004674 <__libc_init_array+0x40>)
 8004646:	4c0c      	ldr	r4, [pc, #48]	; (8004678 <__libc_init_array+0x44>)
 8004648:	f000 fc7a 	bl	8004f40 <_init>
 800464c:	1b64      	subs	r4, r4, r5
 800464e:	10a4      	asrs	r4, r4, #2
 8004650:	2600      	movs	r6, #0
 8004652:	42a6      	cmp	r6, r4
 8004654:	d105      	bne.n	8004662 <__libc_init_array+0x2e>
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	f855 3b04 	ldr.w	r3, [r5], #4
 800465c:	4798      	blx	r3
 800465e:	3601      	adds	r6, #1
 8004660:	e7ee      	b.n	8004640 <__libc_init_array+0xc>
 8004662:	f855 3b04 	ldr.w	r3, [r5], #4
 8004666:	4798      	blx	r3
 8004668:	3601      	adds	r6, #1
 800466a:	e7f2      	b.n	8004652 <__libc_init_array+0x1e>
 800466c:	08004fb8 	.word	0x08004fb8
 8004670:	08004fb8 	.word	0x08004fb8
 8004674:	08004fb8 	.word	0x08004fb8
 8004678:	08004fbc 	.word	0x08004fbc

0800467c <__retarget_lock_acquire_recursive>:
 800467c:	4770      	bx	lr

0800467e <__retarget_lock_release_recursive>:
 800467e:	4770      	bx	lr

08004680 <memcpy>:
 8004680:	440a      	add	r2, r1
 8004682:	4291      	cmp	r1, r2
 8004684:	f100 33ff 	add.w	r3, r0, #4294967295
 8004688:	d100      	bne.n	800468c <memcpy+0xc>
 800468a:	4770      	bx	lr
 800468c:	b510      	push	{r4, lr}
 800468e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004696:	4291      	cmp	r1, r2
 8004698:	d1f9      	bne.n	800468e <memcpy+0xe>
 800469a:	bd10      	pop	{r4, pc}

0800469c <_free_r>:
 800469c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800469e:	2900      	cmp	r1, #0
 80046a0:	d044      	beq.n	800472c <_free_r+0x90>
 80046a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a6:	9001      	str	r0, [sp, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f1a1 0404 	sub.w	r4, r1, #4
 80046ae:	bfb8      	it	lt
 80046b0:	18e4      	addlt	r4, r4, r3
 80046b2:	f7ff fdb5 	bl	8004220 <__malloc_lock>
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <_free_r+0x94>)
 80046b8:	9801      	ldr	r0, [sp, #4]
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	b933      	cbnz	r3, 80046cc <_free_r+0x30>
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	6014      	str	r4, [r2, #0]
 80046c2:	b003      	add	sp, #12
 80046c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046c8:	f7ff bdb0 	b.w	800422c <__malloc_unlock>
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	d908      	bls.n	80046e2 <_free_r+0x46>
 80046d0:	6825      	ldr	r5, [r4, #0]
 80046d2:	1961      	adds	r1, r4, r5
 80046d4:	428b      	cmp	r3, r1
 80046d6:	bf01      	itttt	eq
 80046d8:	6819      	ldreq	r1, [r3, #0]
 80046da:	685b      	ldreq	r3, [r3, #4]
 80046dc:	1949      	addeq	r1, r1, r5
 80046de:	6021      	streq	r1, [r4, #0]
 80046e0:	e7ed      	b.n	80046be <_free_r+0x22>
 80046e2:	461a      	mov	r2, r3
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b10b      	cbz	r3, 80046ec <_free_r+0x50>
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d9fa      	bls.n	80046e2 <_free_r+0x46>
 80046ec:	6811      	ldr	r1, [r2, #0]
 80046ee:	1855      	adds	r5, r2, r1
 80046f0:	42a5      	cmp	r5, r4
 80046f2:	d10b      	bne.n	800470c <_free_r+0x70>
 80046f4:	6824      	ldr	r4, [r4, #0]
 80046f6:	4421      	add	r1, r4
 80046f8:	1854      	adds	r4, r2, r1
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	6011      	str	r1, [r2, #0]
 80046fe:	d1e0      	bne.n	80046c2 <_free_r+0x26>
 8004700:	681c      	ldr	r4, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	6053      	str	r3, [r2, #4]
 8004706:	440c      	add	r4, r1
 8004708:	6014      	str	r4, [r2, #0]
 800470a:	e7da      	b.n	80046c2 <_free_r+0x26>
 800470c:	d902      	bls.n	8004714 <_free_r+0x78>
 800470e:	230c      	movs	r3, #12
 8004710:	6003      	str	r3, [r0, #0]
 8004712:	e7d6      	b.n	80046c2 <_free_r+0x26>
 8004714:	6825      	ldr	r5, [r4, #0]
 8004716:	1961      	adds	r1, r4, r5
 8004718:	428b      	cmp	r3, r1
 800471a:	bf04      	itt	eq
 800471c:	6819      	ldreq	r1, [r3, #0]
 800471e:	685b      	ldreq	r3, [r3, #4]
 8004720:	6063      	str	r3, [r4, #4]
 8004722:	bf04      	itt	eq
 8004724:	1949      	addeq	r1, r1, r5
 8004726:	6021      	streq	r1, [r4, #0]
 8004728:	6054      	str	r4, [r2, #4]
 800472a:	e7ca      	b.n	80046c2 <_free_r+0x26>
 800472c:	b003      	add	sp, #12
 800472e:	bd30      	pop	{r4, r5, pc}
 8004730:	200002dc 	.word	0x200002dc

08004734 <__sfputc_r>:
 8004734:	6893      	ldr	r3, [r2, #8]
 8004736:	3b01      	subs	r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	b410      	push	{r4}
 800473c:	6093      	str	r3, [r2, #8]
 800473e:	da08      	bge.n	8004752 <__sfputc_r+0x1e>
 8004740:	6994      	ldr	r4, [r2, #24]
 8004742:	42a3      	cmp	r3, r4
 8004744:	db01      	blt.n	800474a <__sfputc_r+0x16>
 8004746:	290a      	cmp	r1, #10
 8004748:	d103      	bne.n	8004752 <__sfputc_r+0x1e>
 800474a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800474e:	f7ff be78 	b.w	8004442 <__swbuf_r>
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	1c58      	adds	r0, r3, #1
 8004756:	6010      	str	r0, [r2, #0]
 8004758:	7019      	strb	r1, [r3, #0]
 800475a:	4608      	mov	r0, r1
 800475c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004760:	4770      	bx	lr

08004762 <__sfputs_r>:
 8004762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004764:	4606      	mov	r6, r0
 8004766:	460f      	mov	r7, r1
 8004768:	4614      	mov	r4, r2
 800476a:	18d5      	adds	r5, r2, r3
 800476c:	42ac      	cmp	r4, r5
 800476e:	d101      	bne.n	8004774 <__sfputs_r+0x12>
 8004770:	2000      	movs	r0, #0
 8004772:	e007      	b.n	8004784 <__sfputs_r+0x22>
 8004774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004778:	463a      	mov	r2, r7
 800477a:	4630      	mov	r0, r6
 800477c:	f7ff ffda 	bl	8004734 <__sfputc_r>
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	d1f3      	bne.n	800476c <__sfputs_r+0xa>
 8004784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004788 <_vfiprintf_r>:
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	460d      	mov	r5, r1
 800478e:	b09d      	sub	sp, #116	; 0x74
 8004790:	4614      	mov	r4, r2
 8004792:	4698      	mov	r8, r3
 8004794:	4606      	mov	r6, r0
 8004796:	b118      	cbz	r0, 80047a0 <_vfiprintf_r+0x18>
 8004798:	6a03      	ldr	r3, [r0, #32]
 800479a:	b90b      	cbnz	r3, 80047a0 <_vfiprintf_r+0x18>
 800479c:	f7ff fdc6 	bl	800432c <__sinit>
 80047a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047a2:	07d9      	lsls	r1, r3, #31
 80047a4:	d405      	bmi.n	80047b2 <_vfiprintf_r+0x2a>
 80047a6:	89ab      	ldrh	r3, [r5, #12]
 80047a8:	059a      	lsls	r2, r3, #22
 80047aa:	d402      	bmi.n	80047b2 <_vfiprintf_r+0x2a>
 80047ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047ae:	f7ff ff65 	bl	800467c <__retarget_lock_acquire_recursive>
 80047b2:	89ab      	ldrh	r3, [r5, #12]
 80047b4:	071b      	lsls	r3, r3, #28
 80047b6:	d501      	bpl.n	80047bc <_vfiprintf_r+0x34>
 80047b8:	692b      	ldr	r3, [r5, #16]
 80047ba:	b99b      	cbnz	r3, 80047e4 <_vfiprintf_r+0x5c>
 80047bc:	4629      	mov	r1, r5
 80047be:	4630      	mov	r0, r6
 80047c0:	f7ff fe7c 	bl	80044bc <__swsetup_r>
 80047c4:	b170      	cbz	r0, 80047e4 <_vfiprintf_r+0x5c>
 80047c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047c8:	07dc      	lsls	r4, r3, #31
 80047ca:	d504      	bpl.n	80047d6 <_vfiprintf_r+0x4e>
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	b01d      	add	sp, #116	; 0x74
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	89ab      	ldrh	r3, [r5, #12]
 80047d8:	0598      	lsls	r0, r3, #22
 80047da:	d4f7      	bmi.n	80047cc <_vfiprintf_r+0x44>
 80047dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047de:	f7ff ff4e 	bl	800467e <__retarget_lock_release_recursive>
 80047e2:	e7f3      	b.n	80047cc <_vfiprintf_r+0x44>
 80047e4:	2300      	movs	r3, #0
 80047e6:	9309      	str	r3, [sp, #36]	; 0x24
 80047e8:	2320      	movs	r3, #32
 80047ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80047f2:	2330      	movs	r3, #48	; 0x30
 80047f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80049a8 <_vfiprintf_r+0x220>
 80047f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047fc:	f04f 0901 	mov.w	r9, #1
 8004800:	4623      	mov	r3, r4
 8004802:	469a      	mov	sl, r3
 8004804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004808:	b10a      	cbz	r2, 800480e <_vfiprintf_r+0x86>
 800480a:	2a25      	cmp	r2, #37	; 0x25
 800480c:	d1f9      	bne.n	8004802 <_vfiprintf_r+0x7a>
 800480e:	ebba 0b04 	subs.w	fp, sl, r4
 8004812:	d00b      	beq.n	800482c <_vfiprintf_r+0xa4>
 8004814:	465b      	mov	r3, fp
 8004816:	4622      	mov	r2, r4
 8004818:	4629      	mov	r1, r5
 800481a:	4630      	mov	r0, r6
 800481c:	f7ff ffa1 	bl	8004762 <__sfputs_r>
 8004820:	3001      	adds	r0, #1
 8004822:	f000 80a9 	beq.w	8004978 <_vfiprintf_r+0x1f0>
 8004826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004828:	445a      	add	r2, fp
 800482a:	9209      	str	r2, [sp, #36]	; 0x24
 800482c:	f89a 3000 	ldrb.w	r3, [sl]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80a1 	beq.w	8004978 <_vfiprintf_r+0x1f0>
 8004836:	2300      	movs	r3, #0
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004840:	f10a 0a01 	add.w	sl, sl, #1
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	9307      	str	r3, [sp, #28]
 8004848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800484c:	931a      	str	r3, [sp, #104]	; 0x68
 800484e:	4654      	mov	r4, sl
 8004850:	2205      	movs	r2, #5
 8004852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004856:	4854      	ldr	r0, [pc, #336]	; (80049a8 <_vfiprintf_r+0x220>)
 8004858:	f7fb fcda 	bl	8000210 <memchr>
 800485c:	9a04      	ldr	r2, [sp, #16]
 800485e:	b9d8      	cbnz	r0, 8004898 <_vfiprintf_r+0x110>
 8004860:	06d1      	lsls	r1, r2, #27
 8004862:	bf44      	itt	mi
 8004864:	2320      	movmi	r3, #32
 8004866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800486a:	0713      	lsls	r3, r2, #28
 800486c:	bf44      	itt	mi
 800486e:	232b      	movmi	r3, #43	; 0x2b
 8004870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004874:	f89a 3000 	ldrb.w	r3, [sl]
 8004878:	2b2a      	cmp	r3, #42	; 0x2a
 800487a:	d015      	beq.n	80048a8 <_vfiprintf_r+0x120>
 800487c:	9a07      	ldr	r2, [sp, #28]
 800487e:	4654      	mov	r4, sl
 8004880:	2000      	movs	r0, #0
 8004882:	f04f 0c0a 	mov.w	ip, #10
 8004886:	4621      	mov	r1, r4
 8004888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800488c:	3b30      	subs	r3, #48	; 0x30
 800488e:	2b09      	cmp	r3, #9
 8004890:	d94d      	bls.n	800492e <_vfiprintf_r+0x1a6>
 8004892:	b1b0      	cbz	r0, 80048c2 <_vfiprintf_r+0x13a>
 8004894:	9207      	str	r2, [sp, #28]
 8004896:	e014      	b.n	80048c2 <_vfiprintf_r+0x13a>
 8004898:	eba0 0308 	sub.w	r3, r0, r8
 800489c:	fa09 f303 	lsl.w	r3, r9, r3
 80048a0:	4313      	orrs	r3, r2
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	46a2      	mov	sl, r4
 80048a6:	e7d2      	b.n	800484e <_vfiprintf_r+0xc6>
 80048a8:	9b03      	ldr	r3, [sp, #12]
 80048aa:	1d19      	adds	r1, r3, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	9103      	str	r1, [sp, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bfbb      	ittet	lt
 80048b4:	425b      	neglt	r3, r3
 80048b6:	f042 0202 	orrlt.w	r2, r2, #2
 80048ba:	9307      	strge	r3, [sp, #28]
 80048bc:	9307      	strlt	r3, [sp, #28]
 80048be:	bfb8      	it	lt
 80048c0:	9204      	strlt	r2, [sp, #16]
 80048c2:	7823      	ldrb	r3, [r4, #0]
 80048c4:	2b2e      	cmp	r3, #46	; 0x2e
 80048c6:	d10c      	bne.n	80048e2 <_vfiprintf_r+0x15a>
 80048c8:	7863      	ldrb	r3, [r4, #1]
 80048ca:	2b2a      	cmp	r3, #42	; 0x2a
 80048cc:	d134      	bne.n	8004938 <_vfiprintf_r+0x1b0>
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	1d1a      	adds	r2, r3, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	9203      	str	r2, [sp, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfb8      	it	lt
 80048da:	f04f 33ff 	movlt.w	r3, #4294967295
 80048de:	3402      	adds	r4, #2
 80048e0:	9305      	str	r3, [sp, #20]
 80048e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80049b8 <_vfiprintf_r+0x230>
 80048e6:	7821      	ldrb	r1, [r4, #0]
 80048e8:	2203      	movs	r2, #3
 80048ea:	4650      	mov	r0, sl
 80048ec:	f7fb fc90 	bl	8000210 <memchr>
 80048f0:	b138      	cbz	r0, 8004902 <_vfiprintf_r+0x17a>
 80048f2:	9b04      	ldr	r3, [sp, #16]
 80048f4:	eba0 000a 	sub.w	r0, r0, sl
 80048f8:	2240      	movs	r2, #64	; 0x40
 80048fa:	4082      	lsls	r2, r0
 80048fc:	4313      	orrs	r3, r2
 80048fe:	3401      	adds	r4, #1
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004906:	4829      	ldr	r0, [pc, #164]	; (80049ac <_vfiprintf_r+0x224>)
 8004908:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800490c:	2206      	movs	r2, #6
 800490e:	f7fb fc7f 	bl	8000210 <memchr>
 8004912:	2800      	cmp	r0, #0
 8004914:	d03f      	beq.n	8004996 <_vfiprintf_r+0x20e>
 8004916:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <_vfiprintf_r+0x228>)
 8004918:	bb1b      	cbnz	r3, 8004962 <_vfiprintf_r+0x1da>
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	3307      	adds	r3, #7
 800491e:	f023 0307 	bic.w	r3, r3, #7
 8004922:	3308      	adds	r3, #8
 8004924:	9303      	str	r3, [sp, #12]
 8004926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004928:	443b      	add	r3, r7
 800492a:	9309      	str	r3, [sp, #36]	; 0x24
 800492c:	e768      	b.n	8004800 <_vfiprintf_r+0x78>
 800492e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004932:	460c      	mov	r4, r1
 8004934:	2001      	movs	r0, #1
 8004936:	e7a6      	b.n	8004886 <_vfiprintf_r+0xfe>
 8004938:	2300      	movs	r3, #0
 800493a:	3401      	adds	r4, #1
 800493c:	9305      	str	r3, [sp, #20]
 800493e:	4619      	mov	r1, r3
 8004940:	f04f 0c0a 	mov.w	ip, #10
 8004944:	4620      	mov	r0, r4
 8004946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800494a:	3a30      	subs	r2, #48	; 0x30
 800494c:	2a09      	cmp	r2, #9
 800494e:	d903      	bls.n	8004958 <_vfiprintf_r+0x1d0>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0c6      	beq.n	80048e2 <_vfiprintf_r+0x15a>
 8004954:	9105      	str	r1, [sp, #20]
 8004956:	e7c4      	b.n	80048e2 <_vfiprintf_r+0x15a>
 8004958:	fb0c 2101 	mla	r1, ip, r1, r2
 800495c:	4604      	mov	r4, r0
 800495e:	2301      	movs	r3, #1
 8004960:	e7f0      	b.n	8004944 <_vfiprintf_r+0x1bc>
 8004962:	ab03      	add	r3, sp, #12
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	462a      	mov	r2, r5
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <_vfiprintf_r+0x22c>)
 800496a:	a904      	add	r1, sp, #16
 800496c:	4630      	mov	r0, r6
 800496e:	f3af 8000 	nop.w
 8004972:	4607      	mov	r7, r0
 8004974:	1c78      	adds	r0, r7, #1
 8004976:	d1d6      	bne.n	8004926 <_vfiprintf_r+0x19e>
 8004978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800497a:	07d9      	lsls	r1, r3, #31
 800497c:	d405      	bmi.n	800498a <_vfiprintf_r+0x202>
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	059a      	lsls	r2, r3, #22
 8004982:	d402      	bmi.n	800498a <_vfiprintf_r+0x202>
 8004984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004986:	f7ff fe7a 	bl	800467e <__retarget_lock_release_recursive>
 800498a:	89ab      	ldrh	r3, [r5, #12]
 800498c:	065b      	lsls	r3, r3, #25
 800498e:	f53f af1d 	bmi.w	80047cc <_vfiprintf_r+0x44>
 8004992:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004994:	e71c      	b.n	80047d0 <_vfiprintf_r+0x48>
 8004996:	ab03      	add	r3, sp, #12
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	462a      	mov	r2, r5
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <_vfiprintf_r+0x22c>)
 800499e:	a904      	add	r1, sp, #16
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f879 	bl	8004a98 <_printf_i>
 80049a6:	e7e4      	b.n	8004972 <_vfiprintf_r+0x1ea>
 80049a8:	08004f7c 	.word	0x08004f7c
 80049ac:	08004f86 	.word	0x08004f86
 80049b0:	00000000 	.word	0x00000000
 80049b4:	08004763 	.word	0x08004763
 80049b8:	08004f82 	.word	0x08004f82

080049bc <_printf_common>:
 80049bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	4616      	mov	r6, r2
 80049c2:	4699      	mov	r9, r3
 80049c4:	688a      	ldr	r2, [r1, #8]
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049cc:	4293      	cmp	r3, r2
 80049ce:	bfb8      	it	lt
 80049d0:	4613      	movlt	r3, r2
 80049d2:	6033      	str	r3, [r6, #0]
 80049d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049d8:	4607      	mov	r7, r0
 80049da:	460c      	mov	r4, r1
 80049dc:	b10a      	cbz	r2, 80049e2 <_printf_common+0x26>
 80049de:	3301      	adds	r3, #1
 80049e0:	6033      	str	r3, [r6, #0]
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	0699      	lsls	r1, r3, #26
 80049e6:	bf42      	ittt	mi
 80049e8:	6833      	ldrmi	r3, [r6, #0]
 80049ea:	3302      	addmi	r3, #2
 80049ec:	6033      	strmi	r3, [r6, #0]
 80049ee:	6825      	ldr	r5, [r4, #0]
 80049f0:	f015 0506 	ands.w	r5, r5, #6
 80049f4:	d106      	bne.n	8004a04 <_printf_common+0x48>
 80049f6:	f104 0a19 	add.w	sl, r4, #25
 80049fa:	68e3      	ldr	r3, [r4, #12]
 80049fc:	6832      	ldr	r2, [r6, #0]
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	dc26      	bgt.n	8004a52 <_printf_common+0x96>
 8004a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a08:	1e13      	subs	r3, r2, #0
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	0692      	lsls	r2, r2, #26
 8004a12:	d42b      	bmi.n	8004a6c <_printf_common+0xb0>
 8004a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a18:	4649      	mov	r1, r9
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	47c0      	blx	r8
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d01e      	beq.n	8004a60 <_printf_common+0xa4>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	6922      	ldr	r2, [r4, #16]
 8004a26:	f003 0306 	and.w	r3, r3, #6
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	bf02      	ittt	eq
 8004a2e:	68e5      	ldreq	r5, [r4, #12]
 8004a30:	6833      	ldreq	r3, [r6, #0]
 8004a32:	1aed      	subeq	r5, r5, r3
 8004a34:	68a3      	ldr	r3, [r4, #8]
 8004a36:	bf0c      	ite	eq
 8004a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a3c:	2500      	movne	r5, #0
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	bfc4      	itt	gt
 8004a42:	1a9b      	subgt	r3, r3, r2
 8004a44:	18ed      	addgt	r5, r5, r3
 8004a46:	2600      	movs	r6, #0
 8004a48:	341a      	adds	r4, #26
 8004a4a:	42b5      	cmp	r5, r6
 8004a4c:	d11a      	bne.n	8004a84 <_printf_common+0xc8>
 8004a4e:	2000      	movs	r0, #0
 8004a50:	e008      	b.n	8004a64 <_printf_common+0xa8>
 8004a52:	2301      	movs	r3, #1
 8004a54:	4652      	mov	r2, sl
 8004a56:	4649      	mov	r1, r9
 8004a58:	4638      	mov	r0, r7
 8004a5a:	47c0      	blx	r8
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d103      	bne.n	8004a68 <_printf_common+0xac>
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a68:	3501      	adds	r5, #1
 8004a6a:	e7c6      	b.n	80049fa <_printf_common+0x3e>
 8004a6c:	18e1      	adds	r1, r4, r3
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	2030      	movs	r0, #48	; 0x30
 8004a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a76:	4422      	add	r2, r4
 8004a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a80:	3302      	adds	r3, #2
 8004a82:	e7c7      	b.n	8004a14 <_printf_common+0x58>
 8004a84:	2301      	movs	r3, #1
 8004a86:	4622      	mov	r2, r4
 8004a88:	4649      	mov	r1, r9
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	47c0      	blx	r8
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d0e6      	beq.n	8004a60 <_printf_common+0xa4>
 8004a92:	3601      	adds	r6, #1
 8004a94:	e7d9      	b.n	8004a4a <_printf_common+0x8e>
	...

08004a98 <_printf_i>:
 8004a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	7e0f      	ldrb	r7, [r1, #24]
 8004a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004aa0:	2f78      	cmp	r7, #120	; 0x78
 8004aa2:	4691      	mov	r9, r2
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	469a      	mov	sl, r3
 8004aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004aae:	d807      	bhi.n	8004ac0 <_printf_i+0x28>
 8004ab0:	2f62      	cmp	r7, #98	; 0x62
 8004ab2:	d80a      	bhi.n	8004aca <_printf_i+0x32>
 8004ab4:	2f00      	cmp	r7, #0
 8004ab6:	f000 80d4 	beq.w	8004c62 <_printf_i+0x1ca>
 8004aba:	2f58      	cmp	r7, #88	; 0x58
 8004abc:	f000 80c0 	beq.w	8004c40 <_printf_i+0x1a8>
 8004ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ac8:	e03a      	b.n	8004b40 <_printf_i+0xa8>
 8004aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ace:	2b15      	cmp	r3, #21
 8004ad0:	d8f6      	bhi.n	8004ac0 <_printf_i+0x28>
 8004ad2:	a101      	add	r1, pc, #4	; (adr r1, 8004ad8 <_printf_i+0x40>)
 8004ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ad8:	08004b31 	.word	0x08004b31
 8004adc:	08004b45 	.word	0x08004b45
 8004ae0:	08004ac1 	.word	0x08004ac1
 8004ae4:	08004ac1 	.word	0x08004ac1
 8004ae8:	08004ac1 	.word	0x08004ac1
 8004aec:	08004ac1 	.word	0x08004ac1
 8004af0:	08004b45 	.word	0x08004b45
 8004af4:	08004ac1 	.word	0x08004ac1
 8004af8:	08004ac1 	.word	0x08004ac1
 8004afc:	08004ac1 	.word	0x08004ac1
 8004b00:	08004ac1 	.word	0x08004ac1
 8004b04:	08004c49 	.word	0x08004c49
 8004b08:	08004b71 	.word	0x08004b71
 8004b0c:	08004c03 	.word	0x08004c03
 8004b10:	08004ac1 	.word	0x08004ac1
 8004b14:	08004ac1 	.word	0x08004ac1
 8004b18:	08004c6b 	.word	0x08004c6b
 8004b1c:	08004ac1 	.word	0x08004ac1
 8004b20:	08004b71 	.word	0x08004b71
 8004b24:	08004ac1 	.word	0x08004ac1
 8004b28:	08004ac1 	.word	0x08004ac1
 8004b2c:	08004c0b 	.word	0x08004c0b
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	1d1a      	adds	r2, r3, #4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	602a      	str	r2, [r5, #0]
 8004b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b40:	2301      	movs	r3, #1
 8004b42:	e09f      	b.n	8004c84 <_printf_i+0x1ec>
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	0607      	lsls	r7, r0, #24
 8004b4a:	f103 0104 	add.w	r1, r3, #4
 8004b4e:	6029      	str	r1, [r5, #0]
 8004b50:	d501      	bpl.n	8004b56 <_printf_i+0xbe>
 8004b52:	681e      	ldr	r6, [r3, #0]
 8004b54:	e003      	b.n	8004b5e <_printf_i+0xc6>
 8004b56:	0646      	lsls	r6, r0, #25
 8004b58:	d5fb      	bpl.n	8004b52 <_printf_i+0xba>
 8004b5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	da03      	bge.n	8004b6a <_printf_i+0xd2>
 8004b62:	232d      	movs	r3, #45	; 0x2d
 8004b64:	4276      	negs	r6, r6
 8004b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6a:	485a      	ldr	r0, [pc, #360]	; (8004cd4 <_printf_i+0x23c>)
 8004b6c:	230a      	movs	r3, #10
 8004b6e:	e012      	b.n	8004b96 <_printf_i+0xfe>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	1d19      	adds	r1, r3, #4
 8004b76:	6029      	str	r1, [r5, #0]
 8004b78:	0605      	lsls	r5, r0, #24
 8004b7a:	d501      	bpl.n	8004b80 <_printf_i+0xe8>
 8004b7c:	681e      	ldr	r6, [r3, #0]
 8004b7e:	e002      	b.n	8004b86 <_printf_i+0xee>
 8004b80:	0641      	lsls	r1, r0, #25
 8004b82:	d5fb      	bpl.n	8004b7c <_printf_i+0xe4>
 8004b84:	881e      	ldrh	r6, [r3, #0]
 8004b86:	4853      	ldr	r0, [pc, #332]	; (8004cd4 <_printf_i+0x23c>)
 8004b88:	2f6f      	cmp	r7, #111	; 0x6f
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2308      	moveq	r3, #8
 8004b8e:	230a      	movne	r3, #10
 8004b90:	2100      	movs	r1, #0
 8004b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b96:	6865      	ldr	r5, [r4, #4]
 8004b98:	60a5      	str	r5, [r4, #8]
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	bfa2      	ittt	ge
 8004b9e:	6821      	ldrge	r1, [r4, #0]
 8004ba0:	f021 0104 	bicge.w	r1, r1, #4
 8004ba4:	6021      	strge	r1, [r4, #0]
 8004ba6:	b90e      	cbnz	r6, 8004bac <_printf_i+0x114>
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	d04b      	beq.n	8004c44 <_printf_i+0x1ac>
 8004bac:	4615      	mov	r5, r2
 8004bae:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bb2:	fb03 6711 	mls	r7, r3, r1, r6
 8004bb6:	5dc7      	ldrb	r7, [r0, r7]
 8004bb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bbc:	4637      	mov	r7, r6
 8004bbe:	42bb      	cmp	r3, r7
 8004bc0:	460e      	mov	r6, r1
 8004bc2:	d9f4      	bls.n	8004bae <_printf_i+0x116>
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d10b      	bne.n	8004be0 <_printf_i+0x148>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	07de      	lsls	r6, r3, #31
 8004bcc:	d508      	bpl.n	8004be0 <_printf_i+0x148>
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	6861      	ldr	r1, [r4, #4]
 8004bd2:	4299      	cmp	r1, r3
 8004bd4:	bfde      	ittt	le
 8004bd6:	2330      	movle	r3, #48	; 0x30
 8004bd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004be0:	1b52      	subs	r2, r2, r5
 8004be2:	6122      	str	r2, [r4, #16]
 8004be4:	f8cd a000 	str.w	sl, [sp]
 8004be8:	464b      	mov	r3, r9
 8004bea:	aa03      	add	r2, sp, #12
 8004bec:	4621      	mov	r1, r4
 8004bee:	4640      	mov	r0, r8
 8004bf0:	f7ff fee4 	bl	80049bc <_printf_common>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d14a      	bne.n	8004c8e <_printf_i+0x1f6>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	b004      	add	sp, #16
 8004bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	f043 0320 	orr.w	r3, r3, #32
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	4833      	ldr	r0, [pc, #204]	; (8004cd8 <_printf_i+0x240>)
 8004c0c:	2778      	movs	r7, #120	; 0x78
 8004c0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	6829      	ldr	r1, [r5, #0]
 8004c16:	061f      	lsls	r7, r3, #24
 8004c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c1c:	d402      	bmi.n	8004c24 <_printf_i+0x18c>
 8004c1e:	065f      	lsls	r7, r3, #25
 8004c20:	bf48      	it	mi
 8004c22:	b2b6      	uxthmi	r6, r6
 8004c24:	07df      	lsls	r7, r3, #31
 8004c26:	bf48      	it	mi
 8004c28:	f043 0320 	orrmi.w	r3, r3, #32
 8004c2c:	6029      	str	r1, [r5, #0]
 8004c2e:	bf48      	it	mi
 8004c30:	6023      	strmi	r3, [r4, #0]
 8004c32:	b91e      	cbnz	r6, 8004c3c <_printf_i+0x1a4>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	f023 0320 	bic.w	r3, r3, #32
 8004c3a:	6023      	str	r3, [r4, #0]
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	e7a7      	b.n	8004b90 <_printf_i+0xf8>
 8004c40:	4824      	ldr	r0, [pc, #144]	; (8004cd4 <_printf_i+0x23c>)
 8004c42:	e7e4      	b.n	8004c0e <_printf_i+0x176>
 8004c44:	4615      	mov	r5, r2
 8004c46:	e7bd      	b.n	8004bc4 <_printf_i+0x12c>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	6826      	ldr	r6, [r4, #0]
 8004c4c:	6961      	ldr	r1, [r4, #20]
 8004c4e:	1d18      	adds	r0, r3, #4
 8004c50:	6028      	str	r0, [r5, #0]
 8004c52:	0635      	lsls	r5, r6, #24
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	d501      	bpl.n	8004c5c <_printf_i+0x1c4>
 8004c58:	6019      	str	r1, [r3, #0]
 8004c5a:	e002      	b.n	8004c62 <_printf_i+0x1ca>
 8004c5c:	0670      	lsls	r0, r6, #25
 8004c5e:	d5fb      	bpl.n	8004c58 <_printf_i+0x1c0>
 8004c60:	8019      	strh	r1, [r3, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	4615      	mov	r5, r2
 8004c68:	e7bc      	b.n	8004be4 <_printf_i+0x14c>
 8004c6a:	682b      	ldr	r3, [r5, #0]
 8004c6c:	1d1a      	adds	r2, r3, #4
 8004c6e:	602a      	str	r2, [r5, #0]
 8004c70:	681d      	ldr	r5, [r3, #0]
 8004c72:	6862      	ldr	r2, [r4, #4]
 8004c74:	2100      	movs	r1, #0
 8004c76:	4628      	mov	r0, r5
 8004c78:	f7fb faca 	bl	8000210 <memchr>
 8004c7c:	b108      	cbz	r0, 8004c82 <_printf_i+0x1ea>
 8004c7e:	1b40      	subs	r0, r0, r5
 8004c80:	6060      	str	r0, [r4, #4]
 8004c82:	6863      	ldr	r3, [r4, #4]
 8004c84:	6123      	str	r3, [r4, #16]
 8004c86:	2300      	movs	r3, #0
 8004c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8c:	e7aa      	b.n	8004be4 <_printf_i+0x14c>
 8004c8e:	6923      	ldr	r3, [r4, #16]
 8004c90:	462a      	mov	r2, r5
 8004c92:	4649      	mov	r1, r9
 8004c94:	4640      	mov	r0, r8
 8004c96:	47d0      	blx	sl
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d0ad      	beq.n	8004bf8 <_printf_i+0x160>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	079b      	lsls	r3, r3, #30
 8004ca0:	d413      	bmi.n	8004cca <_printf_i+0x232>
 8004ca2:	68e0      	ldr	r0, [r4, #12]
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	4298      	cmp	r0, r3
 8004ca8:	bfb8      	it	lt
 8004caa:	4618      	movlt	r0, r3
 8004cac:	e7a6      	b.n	8004bfc <_printf_i+0x164>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4632      	mov	r2, r6
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	47d0      	blx	sl
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d09d      	beq.n	8004bf8 <_printf_i+0x160>
 8004cbc:	3501      	adds	r5, #1
 8004cbe:	68e3      	ldr	r3, [r4, #12]
 8004cc0:	9903      	ldr	r1, [sp, #12]
 8004cc2:	1a5b      	subs	r3, r3, r1
 8004cc4:	42ab      	cmp	r3, r5
 8004cc6:	dcf2      	bgt.n	8004cae <_printf_i+0x216>
 8004cc8:	e7eb      	b.n	8004ca2 <_printf_i+0x20a>
 8004cca:	2500      	movs	r5, #0
 8004ccc:	f104 0619 	add.w	r6, r4, #25
 8004cd0:	e7f5      	b.n	8004cbe <_printf_i+0x226>
 8004cd2:	bf00      	nop
 8004cd4:	08004f8d 	.word	0x08004f8d
 8004cd8:	08004f9e 	.word	0x08004f9e

08004cdc <__sflush_r>:
 8004cdc:	898a      	ldrh	r2, [r1, #12]
 8004cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	0710      	lsls	r0, r2, #28
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	d458      	bmi.n	8004d9c <__sflush_r+0xc0>
 8004cea:	684b      	ldr	r3, [r1, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dc05      	bgt.n	8004cfc <__sflush_r+0x20>
 8004cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dc02      	bgt.n	8004cfc <__sflush_r+0x20>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	d0f9      	beq.n	8004cf6 <__sflush_r+0x1a>
 8004d02:	2300      	movs	r3, #0
 8004d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d08:	682f      	ldr	r7, [r5, #0]
 8004d0a:	6a21      	ldr	r1, [r4, #32]
 8004d0c:	602b      	str	r3, [r5, #0]
 8004d0e:	d032      	beq.n	8004d76 <__sflush_r+0x9a>
 8004d10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d12:	89a3      	ldrh	r3, [r4, #12]
 8004d14:	075a      	lsls	r2, r3, #29
 8004d16:	d505      	bpl.n	8004d24 <__sflush_r+0x48>
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	1ac0      	subs	r0, r0, r3
 8004d1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d1e:	b10b      	cbz	r3, 8004d24 <__sflush_r+0x48>
 8004d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d22:	1ac0      	subs	r0, r0, r3
 8004d24:	2300      	movs	r3, #0
 8004d26:	4602      	mov	r2, r0
 8004d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d2a:	6a21      	ldr	r1, [r4, #32]
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b0      	blx	r6
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	d106      	bne.n	8004d44 <__sflush_r+0x68>
 8004d36:	6829      	ldr	r1, [r5, #0]
 8004d38:	291d      	cmp	r1, #29
 8004d3a:	d82b      	bhi.n	8004d94 <__sflush_r+0xb8>
 8004d3c:	4a29      	ldr	r2, [pc, #164]	; (8004de4 <__sflush_r+0x108>)
 8004d3e:	410a      	asrs	r2, r1
 8004d40:	07d6      	lsls	r6, r2, #31
 8004d42:	d427      	bmi.n	8004d94 <__sflush_r+0xb8>
 8004d44:	2200      	movs	r2, #0
 8004d46:	6062      	str	r2, [r4, #4]
 8004d48:	04d9      	lsls	r1, r3, #19
 8004d4a:	6922      	ldr	r2, [r4, #16]
 8004d4c:	6022      	str	r2, [r4, #0]
 8004d4e:	d504      	bpl.n	8004d5a <__sflush_r+0x7e>
 8004d50:	1c42      	adds	r2, r0, #1
 8004d52:	d101      	bne.n	8004d58 <__sflush_r+0x7c>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	b903      	cbnz	r3, 8004d5a <__sflush_r+0x7e>
 8004d58:	6560      	str	r0, [r4, #84]	; 0x54
 8004d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d5c:	602f      	str	r7, [r5, #0]
 8004d5e:	2900      	cmp	r1, #0
 8004d60:	d0c9      	beq.n	8004cf6 <__sflush_r+0x1a>
 8004d62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d66:	4299      	cmp	r1, r3
 8004d68:	d002      	beq.n	8004d70 <__sflush_r+0x94>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f7ff fc96 	bl	800469c <_free_r>
 8004d70:	2000      	movs	r0, #0
 8004d72:	6360      	str	r0, [r4, #52]	; 0x34
 8004d74:	e7c0      	b.n	8004cf8 <__sflush_r+0x1c>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b0      	blx	r6
 8004d7c:	1c41      	adds	r1, r0, #1
 8004d7e:	d1c8      	bne.n	8004d12 <__sflush_r+0x36>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0c5      	beq.n	8004d12 <__sflush_r+0x36>
 8004d86:	2b1d      	cmp	r3, #29
 8004d88:	d001      	beq.n	8004d8e <__sflush_r+0xb2>
 8004d8a:	2b16      	cmp	r3, #22
 8004d8c:	d101      	bne.n	8004d92 <__sflush_r+0xb6>
 8004d8e:	602f      	str	r7, [r5, #0]
 8004d90:	e7b1      	b.n	8004cf6 <__sflush_r+0x1a>
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	e7ad      	b.n	8004cf8 <__sflush_r+0x1c>
 8004d9c:	690f      	ldr	r7, [r1, #16]
 8004d9e:	2f00      	cmp	r7, #0
 8004da0:	d0a9      	beq.n	8004cf6 <__sflush_r+0x1a>
 8004da2:	0793      	lsls	r3, r2, #30
 8004da4:	680e      	ldr	r6, [r1, #0]
 8004da6:	bf08      	it	eq
 8004da8:	694b      	ldreq	r3, [r1, #20]
 8004daa:	600f      	str	r7, [r1, #0]
 8004dac:	bf18      	it	ne
 8004dae:	2300      	movne	r3, #0
 8004db0:	eba6 0807 	sub.w	r8, r6, r7
 8004db4:	608b      	str	r3, [r1, #8]
 8004db6:	f1b8 0f00 	cmp.w	r8, #0
 8004dba:	dd9c      	ble.n	8004cf6 <__sflush_r+0x1a>
 8004dbc:	6a21      	ldr	r1, [r4, #32]
 8004dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dc0:	4643      	mov	r3, r8
 8004dc2:	463a      	mov	r2, r7
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	47b0      	blx	r6
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	dc06      	bgt.n	8004dda <__sflush_r+0xfe>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	e78e      	b.n	8004cf8 <__sflush_r+0x1c>
 8004dda:	4407      	add	r7, r0
 8004ddc:	eba8 0800 	sub.w	r8, r8, r0
 8004de0:	e7e9      	b.n	8004db6 <__sflush_r+0xda>
 8004de2:	bf00      	nop
 8004de4:	dfbffffe 	.word	0xdfbffffe

08004de8 <_fflush_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	4605      	mov	r5, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	b913      	cbnz	r3, 8004df8 <_fflush_r+0x10>
 8004df2:	2500      	movs	r5, #0
 8004df4:	4628      	mov	r0, r5
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	b118      	cbz	r0, 8004e02 <_fflush_r+0x1a>
 8004dfa:	6a03      	ldr	r3, [r0, #32]
 8004dfc:	b90b      	cbnz	r3, 8004e02 <_fflush_r+0x1a>
 8004dfe:	f7ff fa95 	bl	800432c <__sinit>
 8004e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f3      	beq.n	8004df2 <_fflush_r+0xa>
 8004e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e0c:	07d0      	lsls	r0, r2, #31
 8004e0e:	d404      	bmi.n	8004e1a <_fflush_r+0x32>
 8004e10:	0599      	lsls	r1, r3, #22
 8004e12:	d402      	bmi.n	8004e1a <_fflush_r+0x32>
 8004e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e16:	f7ff fc31 	bl	800467c <__retarget_lock_acquire_recursive>
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	f7ff ff5d 	bl	8004cdc <__sflush_r>
 8004e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e24:	07da      	lsls	r2, r3, #31
 8004e26:	4605      	mov	r5, r0
 8004e28:	d4e4      	bmi.n	8004df4 <_fflush_r+0xc>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	059b      	lsls	r3, r3, #22
 8004e2e:	d4e1      	bmi.n	8004df4 <_fflush_r+0xc>
 8004e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e32:	f7ff fc24 	bl	800467e <__retarget_lock_release_recursive>
 8004e36:	e7dd      	b.n	8004df4 <_fflush_r+0xc>

08004e38 <__swhatbuf_r>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e40:	2900      	cmp	r1, #0
 8004e42:	b096      	sub	sp, #88	; 0x58
 8004e44:	4615      	mov	r5, r2
 8004e46:	461e      	mov	r6, r3
 8004e48:	da0d      	bge.n	8004e66 <__swhatbuf_r+0x2e>
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	bf0c      	ite	eq
 8004e56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004e5a:	2340      	movne	r3, #64	; 0x40
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	6031      	str	r1, [r6, #0]
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	b016      	add	sp, #88	; 0x58
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
 8004e66:	466a      	mov	r2, sp
 8004e68:	f000 f848 	bl	8004efc <_fstat_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	dbec      	blt.n	8004e4a <__swhatbuf_r+0x12>
 8004e70:	9901      	ldr	r1, [sp, #4]
 8004e72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004e76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004e7a:	4259      	negs	r1, r3
 8004e7c:	4159      	adcs	r1, r3
 8004e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e82:	e7eb      	b.n	8004e5c <__swhatbuf_r+0x24>

08004e84 <__smakebuf_r>:
 8004e84:	898b      	ldrh	r3, [r1, #12]
 8004e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e88:	079d      	lsls	r5, r3, #30
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	d507      	bpl.n	8004ea0 <__smakebuf_r+0x1c>
 8004e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	2301      	movs	r3, #1
 8004e9a:	6163      	str	r3, [r4, #20]
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	ab01      	add	r3, sp, #4
 8004ea2:	466a      	mov	r2, sp
 8004ea4:	f7ff ffc8 	bl	8004e38 <__swhatbuf_r>
 8004ea8:	9900      	ldr	r1, [sp, #0]
 8004eaa:	4605      	mov	r5, r0
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7ff f937 	bl	8004120 <_malloc_r>
 8004eb2:	b948      	cbnz	r0, 8004ec8 <__smakebuf_r+0x44>
 8004eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb8:	059a      	lsls	r2, r3, #22
 8004eba:	d4ef      	bmi.n	8004e9c <__smakebuf_r+0x18>
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	e7e3      	b.n	8004e90 <__smakebuf_r+0xc>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	6020      	str	r0, [r4, #0]
 8004ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed0:	81a3      	strh	r3, [r4, #12]
 8004ed2:	9b00      	ldr	r3, [sp, #0]
 8004ed4:	6163      	str	r3, [r4, #20]
 8004ed6:	9b01      	ldr	r3, [sp, #4]
 8004ed8:	6120      	str	r0, [r4, #16]
 8004eda:	b15b      	cbz	r3, 8004ef4 <__smakebuf_r+0x70>
 8004edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 f81d 	bl	8004f20 <_isatty_r>
 8004ee6:	b128      	cbz	r0, 8004ef4 <__smakebuf_r+0x70>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	81a3      	strh	r3, [r4, #12]
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	431d      	orrs	r5, r3
 8004ef8:	81a5      	strh	r5, [r4, #12]
 8004efa:	e7cf      	b.n	8004e9c <__smakebuf_r+0x18>

08004efc <_fstat_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d07      	ldr	r5, [pc, #28]	; (8004f1c <_fstat_r+0x20>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	602b      	str	r3, [r5, #0]
 8004f0a:	f7fc f9c8 	bl	800129e <_fstat>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	d102      	bne.n	8004f18 <_fstat_r+0x1c>
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	b103      	cbz	r3, 8004f18 <_fstat_r+0x1c>
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000420 	.word	0x20000420

08004f20 <_isatty_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d06      	ldr	r5, [pc, #24]	; (8004f3c <_isatty_r+0x1c>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	f7fc f9c7 	bl	80012be <_isatty>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_isatty_r+0x1a>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_isatty_r+0x1a>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20000420 	.word	0x20000420

08004f40 <_init>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr

08004f4c <_fini>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr
